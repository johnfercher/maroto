// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Loader is an autogenerated mock type for the Loader type
type Loader struct {
	mock.Mock
}

type Loader_Expecter struct {
	mock *mock.Mock
}

func (_m *Loader) EXPECT() *Loader_Expecter {
	return &Loader_Expecter{mock: &_m.Mock}
}

// GetExt provides a mock function with given fields: path
func (_m *Loader) GetExt(path string) string {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for GetExt")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Loader_GetExt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExt'
type Loader_GetExt_Call struct {
	*mock.Call
}

// GetExt is a helper method to define mock.On call
//   - path string
func (_e *Loader_Expecter) GetExt(path interface{}) *Loader_GetExt_Call {
	return &Loader_GetExt_Call{Call: _e.mock.On("GetExt", path)}
}

func (_c *Loader_GetExt_Call) Run(run func(path string)) *Loader_GetExt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Loader_GetExt_Call) Return(_a0 string) *Loader_GetExt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Loader_GetExt_Call) RunAndReturn(run func(string) string) *Loader_GetExt_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function with given fields: path
func (_m *Loader) Load(path string) ([]byte, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Loader_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type Loader_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - path string
func (_e *Loader_Expecter) Load(path interface{}) *Loader_Load_Call {
	return &Loader_Load_Call{Call: _e.mock.On("Load", path)}
}

func (_c *Loader_Load_Call) Run(run func(path string)) *Loader_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Loader_Load_Call) Return(_a0 []byte, _a1 error) *Loader_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Loader_Load_Call) RunAndReturn(run func(string) ([]byte, error)) *Loader_Load_Call {
	_c.Call.Return(run)
	return _c
}

// NewLoader creates a new instance of Loader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoader(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Loader {
	mock := &Loader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
