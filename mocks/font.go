// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import maroto "github.com/johnfercher/maroto"
import mock "github.com/stretchr/testify/mock"

// Font is an autogenerated mock type for the Font type
type Font struct {
	mock.Mock
}

// GetFamily provides a mock function with given fields:
func (_m *Font) GetFamily() maroto.Family {
	ret := _m.Called()

	var r0 maroto.Family
	if rf, ok := ret.Get(0).(func() maroto.Family); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(maroto.Family)
	}

	return r0
}

// GetFamilyString provides a mock function with given fields: font
func (_m *Font) GetFamilyString(font maroto.Family) string {
	ret := _m.Called(font)

	var r0 string
	if rf, ok := ret.Get(0).(func(maroto.Family) string); ok {
		r0 = rf(font)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetFont provides a mock function with given fields:
func (_m *Font) GetFont() (maroto.Family, maroto.Style, float64) {
	ret := _m.Called()

	var r0 maroto.Family
	if rf, ok := ret.Get(0).(func() maroto.Family); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(maroto.Family)
	}

	var r1 maroto.Style
	if rf, ok := ret.Get(1).(func() maroto.Style); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(maroto.Style)
	}

	var r2 float64
	if rf, ok := ret.Get(2).(func() float64); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(float64)
	}

	return r0, r1, r2
}

// GetSize provides a mock function with given fields:
func (_m *Font) GetSize() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GetStyle provides a mock function with given fields:
func (_m *Font) GetStyle() maroto.Style {
	ret := _m.Called()

	var r0 maroto.Style
	if rf, ok := ret.Get(0).(func() maroto.Style); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(maroto.Style)
	}

	return r0
}

// GetStyleString provides a mock function with given fields: style
func (_m *Font) GetStyleString(style maroto.Style) string {
	ret := _m.Called(style)

	var r0 string
	if rf, ok := ret.Get(0).(func(maroto.Style) string); ok {
		r0 = rf(style)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetFamily provides a mock function with given fields: family
func (_m *Font) SetFamily(family maroto.Family) {
	_m.Called(family)
}

// SetFont provides a mock function with given fields: family, style, size
func (_m *Font) SetFont(family maroto.Family, style maroto.Style, size float64) {
	_m.Called(family, style, size)
}

// SetSize provides a mock function with given fields: size
func (_m *Font) SetSize(size float64) {
	_m.Called(size)
}

// SetStyle provides a mock function with given fields: style
func (_m *Font) SetStyle(style maroto.Style) {
	_m.Called(style)
}
