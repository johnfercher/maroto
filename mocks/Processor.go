// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Processor is an autogenerated mock type for the Processor type
type Processor struct {
	mock.Mock
}

type Processor_Expecter struct {
	mock *mock.Mock
}

func (_m *Processor) EXPECT() *Processor_Expecter {
	return &Processor_Expecter{mock: &_m.Mock}
}

// GenerateDocument provides a mock function with given fields: templateName, content
func (_m *Processor) GenerateDocument(templateName string, content string) []byte {
	ret := _m.Called(templateName, content)

	if len(ret) == 0 {
		panic("no return value specified for GenerateDocument")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(templateName, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Processor_GenerateDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateDocument'
type Processor_GenerateDocument_Call struct {
	*mock.Call
}

// GenerateDocument is a helper method to define mock.On call
//   - templateName string
//   - content string
func (_e *Processor_Expecter) GenerateDocument(templateName interface{}, content interface{}) *Processor_GenerateDocument_Call {
	return &Processor_GenerateDocument_Call{Call: _e.mock.On("GenerateDocument", templateName, content)}
}

func (_c *Processor_GenerateDocument_Call) Run(run func(templateName string, content string)) *Processor_GenerateDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Processor_GenerateDocument_Call) Return(_a0 []byte) *Processor_GenerateDocument_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Processor_GenerateDocument_Call) RunAndReturn(run func(string, string) []byte) *Processor_GenerateDocument_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterTemplate provides a mock function with given fields: templateName, template
func (_m *Processor) RegisterTemplate(templateName string, template string) error {
	ret := _m.Called(templateName, template)

	if len(ret) == 0 {
		panic("no return value specified for RegisterTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(templateName, template)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Processor_RegisterTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterTemplate'
type Processor_RegisterTemplate_Call struct {
	*mock.Call
}

// RegisterTemplate is a helper method to define mock.On call
//   - templateName string
//   - template string
func (_e *Processor_Expecter) RegisterTemplate(templateName interface{}, template interface{}) *Processor_RegisterTemplate_Call {
	return &Processor_RegisterTemplate_Call{Call: _e.mock.On("RegisterTemplate", templateName, template)}
}

func (_c *Processor_RegisterTemplate_Call) Run(run func(templateName string, template string)) *Processor_RegisterTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Processor_RegisterTemplate_Call) Return(_a0 error) *Processor_RegisterTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Processor_RegisterTemplate_Call) RunAndReturn(run func(string, string) error) *Processor_RegisterTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewProcessor creates a new instance of Processor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessor(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Processor {
	mock := &Processor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
