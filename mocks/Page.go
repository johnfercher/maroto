// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	config "github.com/johnfercher/maroto/pkg/v2/config"
	domain "github.com/johnfercher/maroto/pkg/v2/domain"

	internal "github.com/johnfercher/maroto/internal"

	mock "github.com/stretchr/testify/mock"

	tree "github.com/johnfercher/go-tree/tree"
)

// Page is an autogenerated mock type for the Page type
type Page struct {
	mock.Mock
}

type Page_Expecter struct {
	mock *mock.Mock
}

func (_m *Page) EXPECT() *Page_Expecter {
	return &Page_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: rows
func (_m *Page) Add(rows ...domain.Row) domain.Page {
	_va := make([]interface{}, len(rows))
	for _i := range rows {
		_va[_i] = rows[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 domain.Page
	if rf, ok := ret.Get(0).(func(...domain.Row) domain.Page); ok {
		r0 = rf(rows...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Page)
		}
	}

	return r0
}

// Page_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type Page_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - rows ...domain.Row
func (_e *Page_Expecter) Add(rows ...interface{}) *Page_Add_Call {
	return &Page_Add_Call{Call: _e.mock.On("Add",
		append([]interface{}{}, rows...)...)}
}

func (_c *Page_Add_Call) Run(run func(rows ...domain.Row)) *Page_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]domain.Row, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(domain.Row)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Page_Add_Call) Return(_a0 domain.Page) *Page_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Page_Add_Call) RunAndReturn(run func(...domain.Row) domain.Page) *Page_Add_Call {
	_c.Call.Return(run)
	return _c
}

// GetNumber provides a mock function with given fields:
func (_m *Page) GetNumber() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Page_GetNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNumber'
type Page_GetNumber_Call struct {
	*mock.Call
}

// GetNumber is a helper method to define mock.On call
func (_e *Page_Expecter) GetNumber() *Page_GetNumber_Call {
	return &Page_GetNumber_Call{Call: _e.mock.On("GetNumber")}
}

func (_c *Page_GetNumber_Call) Run(run func()) *Page_GetNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Page_GetNumber_Call) Return(_a0 int) *Page_GetNumber_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Page_GetNumber_Call) RunAndReturn(run func() int) *Page_GetNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetStructure provides a mock function with given fields:
func (_m *Page) GetStructure() *tree.Node[domain.Structure] {
	ret := _m.Called()

	var r0 *tree.Node[domain.Structure]
	if rf, ok := ret.Get(0).(func() *tree.Node[domain.Structure]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tree.Node[domain.Structure])
		}
	}

	return r0
}

// Page_GetStructure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStructure'
type Page_GetStructure_Call struct {
	*mock.Call
}

// GetStructure is a helper method to define mock.On call
func (_e *Page_Expecter) GetStructure() *Page_GetStructure_Call {
	return &Page_GetStructure_Call{Call: _e.mock.On("GetStructure")}
}

func (_c *Page_GetStructure_Call) Run(run func()) *Page_GetStructure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Page_GetStructure_Call) Return(_a0 *tree.Node[domain.Structure]) *Page_GetStructure_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Page_GetStructure_Call) RunAndReturn(run func() *tree.Node[domain.Structure]) *Page_GetStructure_Call {
	_c.Call.Return(run)
	return _c
}

// Render provides a mock function with given fields: provider, cell
func (_m *Page) Render(provider domain.Provider, cell internal.Cell) {
	_m.Called(provider, cell)
}

// Page_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type Page_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
//   - provider domain.Provider
//   - cell internal.Cell
func (_e *Page_Expecter) Render(provider interface{}, cell interface{}) *Page_Render_Call {
	return &Page_Render_Call{Call: _e.mock.On("Render", provider, cell)}
}

func (_c *Page_Render_Call) Run(run func(provider domain.Provider, cell internal.Cell)) *Page_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Provider), args[1].(internal.Cell))
	})
	return _c
}

func (_c *Page_Render_Call) Return() *Page_Render_Call {
	_c.Call.Return()
	return _c
}

func (_c *Page_Render_Call) RunAndReturn(run func(domain.Provider, internal.Cell)) *Page_Render_Call {
	_c.Call.Return(run)
	return _c
}

// SetConfig provides a mock function with given fields: _a0
func (_m *Page) SetConfig(_a0 *config.Maroto) {
	_m.Called(_a0)
}

// Page_SetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConfig'
type Page_SetConfig_Call struct {
	*mock.Call
}

// SetConfig is a helper method to define mock.On call
//   - _a0 *config.Maroto
func (_e *Page_Expecter) SetConfig(_a0 interface{}) *Page_SetConfig_Call {
	return &Page_SetConfig_Call{Call: _e.mock.On("SetConfig", _a0)}
}

func (_c *Page_SetConfig_Call) Run(run func(_a0 *config.Maroto)) *Page_SetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.Maroto))
	})
	return _c
}

func (_c *Page_SetConfig_Call) Return() *Page_SetConfig_Call {
	_c.Call.Return()
	return _c
}

func (_c *Page_SetConfig_Call) RunAndReturn(run func(*config.Maroto)) *Page_SetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// SetNumber provides a mock function with given fields: number
func (_m *Page) SetNumber(number int) {
	_m.Called(number)
}

// Page_SetNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNumber'
type Page_SetNumber_Call struct {
	*mock.Call
}

// SetNumber is a helper method to define mock.On call
//   - number int
func (_e *Page_Expecter) SetNumber(number interface{}) *Page_SetNumber_Call {
	return &Page_SetNumber_Call{Call: _e.mock.On("SetNumber", number)}
}

func (_c *Page_SetNumber_Call) Run(run func(number int)) *Page_SetNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Page_SetNumber_Call) Return() *Page_SetNumber_Call {
	_c.Call.Return()
	return _c
}

func (_c *Page_SetNumber_Call) RunAndReturn(run func(int)) *Page_SetNumber_Call {
	_c.Call.Return(run)
	return _c
}

// NewPage creates a new instance of Page. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPage(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Page {
	mock := &Page{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
