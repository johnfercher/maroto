// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	internal "github.com/johnfercher/maroto/internal"
	mock "github.com/stretchr/testify/mock"

	props "github.com/johnfercher/maroto/pkg/props"
)

// Code is an autogenerated mock type for the Code type
type Code struct {
	mock.Mock
}

type Code_Expecter struct {
	mock *mock.Mock
}

func (_m *Code) EXPECT() *Code_Expecter {
	return &Code_Expecter{mock: &_m.Mock}
}

// AddBar provides a mock function with given fields: code, cell, prop
func (_m *Code) AddBar(code string, cell internal.Cell, prop props.Barcode) error {
	ret := _m.Called(code, cell, prop)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, internal.Cell, props.Barcode) error); ok {
		r0 = rf(code, cell, prop)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Code_AddBar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBar'
type Code_AddBar_Call struct {
	*mock.Call
}

// AddBar is a helper method to define mock.On call
//   - code string
//   - cell internal.Cell
//   - prop props.Barcode
func (_e *Code_Expecter) AddBar(code interface{}, cell interface{}, prop interface{}) *Code_AddBar_Call {
	return &Code_AddBar_Call{Call: _e.mock.On("AddBar", code, cell, prop)}
}

func (_c *Code_AddBar_Call) Run(run func(code string, cell internal.Cell, prop props.Barcode)) *Code_AddBar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(internal.Cell), args[2].(props.Barcode))
	})
	return _c
}

func (_c *Code_AddBar_Call) Return(err error) *Code_AddBar_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Code_AddBar_Call) RunAndReturn(run func(string, internal.Cell, props.Barcode) error) *Code_AddBar_Call {
	_c.Call.Return(run)
	return _c
}

// AddDataMatrix provides a mock function with given fields: code, cell, prop
func (_m *Code) AddDataMatrix(code string, cell internal.Cell, prop props.Rect) {
	_m.Called(code, cell, prop)
}

// Code_AddDataMatrix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDataMatrix'
type Code_AddDataMatrix_Call struct {
	*mock.Call
}

// AddDataMatrix is a helper method to define mock.On call
//   - code string
//   - cell internal.Cell
//   - prop props.Rect
func (_e *Code_Expecter) AddDataMatrix(code interface{}, cell interface{}, prop interface{}) *Code_AddDataMatrix_Call {
	return &Code_AddDataMatrix_Call{Call: _e.mock.On("AddDataMatrix", code, cell, prop)}
}

func (_c *Code_AddDataMatrix_Call) Run(run func(code string, cell internal.Cell, prop props.Rect)) *Code_AddDataMatrix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(internal.Cell), args[2].(props.Rect))
	})
	return _c
}

func (_c *Code_AddDataMatrix_Call) Return() *Code_AddDataMatrix_Call {
	_c.Call.Return()
	return _c
}

func (_c *Code_AddDataMatrix_Call) RunAndReturn(run func(string, internal.Cell, props.Rect)) *Code_AddDataMatrix_Call {
	_c.Call.Return(run)
	return _c
}

// AddQr provides a mock function with given fields: code, cell, prop
func (_m *Code) AddQr(code string, cell internal.Cell, prop props.Rect) {
	_m.Called(code, cell, prop)
}

// Code_AddQr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddQr'
type Code_AddQr_Call struct {
	*mock.Call
}

// AddQr is a helper method to define mock.On call
//   - code string
//   - cell internal.Cell
//   - prop props.Rect
func (_e *Code_Expecter) AddQr(code interface{}, cell interface{}, prop interface{}) *Code_AddQr_Call {
	return &Code_AddQr_Call{Call: _e.mock.On("AddQr", code, cell, prop)}
}

func (_c *Code_AddQr_Call) Run(run func(code string, cell internal.Cell, prop props.Rect)) *Code_AddQr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(internal.Cell), args[2].(props.Rect))
	})
	return _c
}

func (_c *Code_AddQr_Call) Return() *Code_AddQr_Call {
	_c.Call.Return()
	return _c
}

func (_c *Code_AddQr_Call) RunAndReturn(run func(string, internal.Cell, props.Rect)) *Code_AddQr_Call {
	_c.Call.Return(run)
	return _c
}

// NewCode creates a new instance of Code. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCode(t interface {
	mock.TestingT
	Cleanup(func())
}) *Code {
	mock := &Code{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
