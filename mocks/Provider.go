// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	cache "github.com/johnfercher/maroto/v2/maroto/cache"
	config "github.com/johnfercher/maroto/v2/maroto/config"

	consts "github.com/johnfercher/maroto/v2/maroto/consts"

	internal "github.com/johnfercher/maroto/v2/internal"

	mock "github.com/stretchr/testify/mock"

	props "github.com/johnfercher/maroto/v2/maroto/props"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// AddBarCode provides a mock function with given fields: code, cell, prop
func (_m *Provider) AddBarCode(code string, cell internal.Cell, prop props.Barcode) {
	_m.Called(code, cell, prop)
}

// Provider_AddBarCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBarCode'
type Provider_AddBarCode_Call struct {
	*mock.Call
}

// AddBarCode is a helper method to define mock.On call
//   - code string
//   - cell internal.Cell
//   - prop props.Barcode
func (_e *Provider_Expecter) AddBarCode(code interface{}, cell interface{}, prop interface{}) *Provider_AddBarCode_Call {
	return &Provider_AddBarCode_Call{Call: _e.mock.On("AddBarCode", code, cell, prop)}
}

func (_c *Provider_AddBarCode_Call) Run(run func(code string, cell internal.Cell, prop props.Barcode)) *Provider_AddBarCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(internal.Cell), args[2].(props.Barcode))
	})
	return _c
}

func (_c *Provider_AddBarCode_Call) Return() *Provider_AddBarCode_Call {
	_c.Call.Return()
	return _c
}

func (_c *Provider_AddBarCode_Call) RunAndReturn(run func(string, internal.Cell, props.Barcode)) *Provider_AddBarCode_Call {
	_c.Call.Return(run)
	return _c
}

// AddImage provides a mock function with given fields: value, cell, prop, extension
func (_m *Provider) AddImage(value string, cell internal.Cell, prop props.Rect, extension consts.Extension) {
	_m.Called(value, cell, prop, extension)
}

// Provider_AddImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddImage'
type Provider_AddImage_Call struct {
	*mock.Call
}

// AddImage is a helper method to define mock.On call
//   - value string
//   - cell internal.Cell
//   - prop props.Rect
//   - extension consts.Extension
func (_e *Provider_Expecter) AddImage(value interface{}, cell interface{}, prop interface{}, extension interface{}) *Provider_AddImage_Call {
	return &Provider_AddImage_Call{Call: _e.mock.On("AddImage", value, cell, prop, extension)}
}

func (_c *Provider_AddImage_Call) Run(run func(value string, cell internal.Cell, prop props.Rect, extension consts.Extension)) *Provider_AddImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(internal.Cell), args[2].(props.Rect), args[3].(consts.Extension))
	})
	return _c
}

func (_c *Provider_AddImage_Call) Return() *Provider_AddImage_Call {
	_c.Call.Return()
	return _c
}

func (_c *Provider_AddImage_Call) RunAndReturn(run func(string, internal.Cell, props.Rect, consts.Extension)) *Provider_AddImage_Call {
	_c.Call.Return(run)
	return _c
}

// AddMatrixCode provides a mock function with given fields: code, cell, prop
func (_m *Provider) AddMatrixCode(code string, cell internal.Cell, prop props.Rect) {
	_m.Called(code, cell, prop)
}

// Provider_AddMatrixCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMatrixCode'
type Provider_AddMatrixCode_Call struct {
	*mock.Call
}

// AddMatrixCode is a helper method to define mock.On call
//   - code string
//   - cell internal.Cell
//   - prop props.Rect
func (_e *Provider_Expecter) AddMatrixCode(code interface{}, cell interface{}, prop interface{}) *Provider_AddMatrixCode_Call {
	return &Provider_AddMatrixCode_Call{Call: _e.mock.On("AddMatrixCode", code, cell, prop)}
}

func (_c *Provider_AddMatrixCode_Call) Run(run func(code string, cell internal.Cell, prop props.Rect)) *Provider_AddMatrixCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(internal.Cell), args[2].(props.Rect))
	})
	return _c
}

func (_c *Provider_AddMatrixCode_Call) Return() *Provider_AddMatrixCode_Call {
	_c.Call.Return()
	return _c
}

func (_c *Provider_AddMatrixCode_Call) RunAndReturn(run func(string, internal.Cell, props.Rect)) *Provider_AddMatrixCode_Call {
	_c.Call.Return(run)
	return _c
}

// AddQrCode provides a mock function with given fields: code, cell, rect
func (_m *Provider) AddQrCode(code string, cell internal.Cell, rect props.Rect) {
	_m.Called(code, cell, rect)
}

// Provider_AddQrCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddQrCode'
type Provider_AddQrCode_Call struct {
	*mock.Call
}

// AddQrCode is a helper method to define mock.On call
//   - code string
//   - cell internal.Cell
//   - rect props.Rect
func (_e *Provider_Expecter) AddQrCode(code interface{}, cell interface{}, rect interface{}) *Provider_AddQrCode_Call {
	return &Provider_AddQrCode_Call{Call: _e.mock.On("AddQrCode", code, cell, rect)}
}

func (_c *Provider_AddQrCode_Call) Run(run func(code string, cell internal.Cell, rect props.Rect)) *Provider_AddQrCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(internal.Cell), args[2].(props.Rect))
	})
	return _c
}

func (_c *Provider_AddQrCode_Call) Return() *Provider_AddQrCode_Call {
	_c.Call.Return()
	return _c
}

func (_c *Provider_AddQrCode_Call) RunAndReturn(run func(string, internal.Cell, props.Rect)) *Provider_AddQrCode_Call {
	_c.Call.Return(run)
	return _c
}

// AddSignature provides a mock function with given fields: text, cell, prop
func (_m *Provider) AddSignature(text string, cell internal.Cell, prop props.Text) {
	_m.Called(text, cell, prop)
}

// Provider_AddSignature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSignature'
type Provider_AddSignature_Call struct {
	*mock.Call
}

// AddSignature is a helper method to define mock.On call
//   - text string
//   - cell internal.Cell
//   - prop props.Text
func (_e *Provider_Expecter) AddSignature(text interface{}, cell interface{}, prop interface{}) *Provider_AddSignature_Call {
	return &Provider_AddSignature_Call{Call: _e.mock.On("AddSignature", text, cell, prop)}
}

func (_c *Provider_AddSignature_Call) Run(run func(text string, cell internal.Cell, prop props.Text)) *Provider_AddSignature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(internal.Cell), args[2].(props.Text))
	})
	return _c
}

func (_c *Provider_AddSignature_Call) Return() *Provider_AddSignature_Call {
	_c.Call.Return()
	return _c
}

func (_c *Provider_AddSignature_Call) RunAndReturn(run func(string, internal.Cell, props.Text)) *Provider_AddSignature_Call {
	_c.Call.Return(run)
	return _c
}

// AddText provides a mock function with given fields: text, cell, prop
func (_m *Provider) AddText(text string, cell internal.Cell, prop props.Text) {
	_m.Called(text, cell, prop)
}

// Provider_AddText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddText'
type Provider_AddText_Call struct {
	*mock.Call
}

// AddText is a helper method to define mock.On call
//   - text string
//   - cell internal.Cell
//   - prop props.Text
func (_e *Provider_Expecter) AddText(text interface{}, cell interface{}, prop interface{}) *Provider_AddText_Call {
	return &Provider_AddText_Call{Call: _e.mock.On("AddText", text, cell, prop)}
}

func (_c *Provider_AddText_Call) Run(run func(text string, cell internal.Cell, prop props.Text)) *Provider_AddText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(internal.Cell), args[2].(props.Text))
	})
	return _c
}

func (_c *Provider_AddText_Call) Return() *Provider_AddText_Call {
	_c.Call.Return()
	return _c
}

func (_c *Provider_AddText_Call) RunAndReturn(run func(string, internal.Cell, props.Text)) *Provider_AddText_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCol provides a mock function with given fields: width, height, _a2, style
func (_m *Provider) CreateCol(width float64, height float64, _a2 *config.Maroto, style *props.Style) {
	_m.Called(width, height, _a2, style)
}

// Provider_CreateCol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCol'
type Provider_CreateCol_Call struct {
	*mock.Call
}

// CreateCol is a helper method to define mock.On call
//   - width float64
//   - height float64
//   - _a2 *config.Maroto
//   - style *props.Style
func (_e *Provider_Expecter) CreateCol(width interface{}, height interface{}, _a2 interface{}, style interface{}) *Provider_CreateCol_Call {
	return &Provider_CreateCol_Call{Call: _e.mock.On("CreateCol", width, height, _a2, style)}
}

func (_c *Provider_CreateCol_Call) Run(run func(width float64, height float64, _a2 *config.Maroto, style *props.Style)) *Provider_CreateCol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(float64), args[2].(*config.Maroto), args[3].(*props.Style))
	})
	return _c
}

func (_c *Provider_CreateCol_Call) Return() *Provider_CreateCol_Call {
	_c.Call.Return()
	return _c
}

func (_c *Provider_CreateCol_Call) RunAndReturn(run func(float64, float64, *config.Maroto, *props.Style)) *Provider_CreateCol_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRow provides a mock function with given fields: height
func (_m *Provider) CreateRow(height float64) {
	_m.Called(height)
}

// Provider_CreateRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRow'
type Provider_CreateRow_Call struct {
	*mock.Call
}

// CreateRow is a helper method to define mock.On call
//   - height float64
func (_e *Provider_Expecter) CreateRow(height interface{}) *Provider_CreateRow_Call {
	return &Provider_CreateRow_Call{Call: _e.mock.On("CreateRow", height)}
}

func (_c *Provider_CreateRow_Call) Run(run func(height float64)) *Provider_CreateRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *Provider_CreateRow_Call) Return() *Provider_CreateRow_Call {
	_c.Call.Return()
	return _c
}

func (_c *Provider_CreateRow_Call) RunAndReturn(run func(float64)) *Provider_CreateRow_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateBytes provides a mock function with given fields:
func (_m *Provider) GenerateBytes() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_GenerateBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateBytes'
type Provider_GenerateBytes_Call struct {
	*mock.Call
}

// GenerateBytes is a helper method to define mock.On call
func (_e *Provider_Expecter) GenerateBytes() *Provider_GenerateBytes_Call {
	return &Provider_GenerateBytes_Call{Call: _e.mock.On("GenerateBytes")}
}

func (_c *Provider_GenerateBytes_Call) Run(run func()) *Provider_GenerateBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_GenerateBytes_Call) Return(_a0 []byte, _a1 error) *Provider_GenerateBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_GenerateBytes_Call) RunAndReturn(run func() ([]byte, error)) *Provider_GenerateBytes_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateFile provides a mock function with given fields: file
func (_m *Provider) GenerateFile(file string) error {
	ret := _m.Called(file)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Provider_GenerateFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateFile'
type Provider_GenerateFile_Call struct {
	*mock.Call
}

// GenerateFile is a helper method to define mock.On call
//   - file string
func (_e *Provider_Expecter) GenerateFile(file interface{}) *Provider_GenerateFile_Call {
	return &Provider_GenerateFile_Call{Call: _e.mock.On("GenerateFile", file)}
}

func (_c *Provider_GenerateFile_Call) Run(run func(file string)) *Provider_GenerateFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Provider_GenerateFile_Call) Return(_a0 error) *Provider_GenerateFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_GenerateFile_Call) RunAndReturn(run func(string) error) *Provider_GenerateFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetDimensions provides a mock function with given fields:
func (_m *Provider) GetDimensions() (float64, float64) {
	ret := _m.Called()

	var r0 float64
	var r1 float64
	if rf, ok := ret.Get(0).(func() (float64, float64)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() float64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(float64)
	}

	return r0, r1
}

// Provider_GetDimensions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDimensions'
type Provider_GetDimensions_Call struct {
	*mock.Call
}

// GetDimensions is a helper method to define mock.On call
func (_e *Provider_Expecter) GetDimensions() *Provider_GetDimensions_Call {
	return &Provider_GetDimensions_Call{Call: _e.mock.On("GetDimensions")}
}

func (_c *Provider_GetDimensions_Call) Run(run func()) *Provider_GetDimensions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_GetDimensions_Call) Return(width float64, height float64) *Provider_GetDimensions_Call {
	_c.Call.Return(width, height)
	return _c
}

func (_c *Provider_GetDimensions_Call) RunAndReturn(run func() (float64, float64)) *Provider_GetDimensions_Call {
	_c.Call.Return(run)
	return _c
}

// GetMargins provides a mock function with given fields:
func (_m *Provider) GetMargins() (float64, float64, float64, float64) {
	ret := _m.Called()

	var r0 float64
	var r1 float64
	var r2 float64
	var r3 float64
	if rf, ok := ret.Get(0).(func() (float64, float64, float64, float64)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() float64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func() float64); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(float64)
	}

	if rf, ok := ret.Get(3).(func() float64); ok {
		r3 = rf()
	} else {
		r3 = ret.Get(3).(float64)
	}

	return r0, r1, r2, r3
}

// Provider_GetMargins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMargins'
type Provider_GetMargins_Call struct {
	*mock.Call
}

// GetMargins is a helper method to define mock.On call
func (_e *Provider_Expecter) GetMargins() *Provider_GetMargins_Call {
	return &Provider_GetMargins_Call{Call: _e.mock.On("GetMargins")}
}

func (_c *Provider_GetMargins_Call) Run(run func()) *Provider_GetMargins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_GetMargins_Call) Return(left float64, top float64, right float64, bottom float64) *Provider_GetMargins_Call {
	_c.Call.Return(left, top, right, bottom)
	return _c
}

func (_c *Provider_GetMargins_Call) RunAndReturn(run func() (float64, float64, float64, float64)) *Provider_GetMargins_Call {
	_c.Call.Return(run)
	return _c
}

// SetCache provides a mock function with given fields: _a0
func (_m *Provider) SetCache(_a0 cache.Cache) {
	_m.Called(_a0)
}

// Provider_SetCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCache'
type Provider_SetCache_Call struct {
	*mock.Call
}

// SetCache is a helper method to define mock.On call
//   - _a0 cache.Cache
func (_e *Provider_Expecter) SetCache(_a0 interface{}) *Provider_SetCache_Call {
	return &Provider_SetCache_Call{Call: _e.mock.On("SetCache", _a0)}
}

func (_c *Provider_SetCache_Call) Run(run func(_a0 cache.Cache)) *Provider_SetCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cache.Cache))
	})
	return _c
}

func (_c *Provider_SetCache_Call) Return() *Provider_SetCache_Call {
	_c.Call.Return()
	return _c
}

func (_c *Provider_SetCache_Call) RunAndReturn(run func(cache.Cache)) *Provider_SetCache_Call {
	_c.Call.Return(run)
	return _c
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
