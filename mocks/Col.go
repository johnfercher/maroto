// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	config "github.com/johnfercher/maroto/pkg/v2/config"
	domain "github.com/johnfercher/maroto/pkg/v2/domain"

	internal "github.com/johnfercher/maroto/internal"

	mock "github.com/stretchr/testify/mock"

	props "github.com/johnfercher/maroto/pkg/props"

	tree "github.com/johnfercher/go-tree/tree"
)

// Col is an autogenerated mock type for the Col type
type Col struct {
	mock.Mock
}

type Col_Expecter struct {
	mock *mock.Mock
}

func (_m *Col) EXPECT() *Col_Expecter {
	return &Col_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: components
func (_m *Col) Add(components ...domain.Component) domain.Col {
	_va := make([]interface{}, len(components))
	for _i := range components {
		_va[_i] = components[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 domain.Col
	if rf, ok := ret.Get(0).(func(...domain.Component) domain.Col); ok {
		r0 = rf(components...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Col)
		}
	}

	return r0
}

// Col_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type Col_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - components ...domain.Component
func (_e *Col_Expecter) Add(components ...interface{}) *Col_Add_Call {
	return &Col_Add_Call{Call: _e.mock.On("Add",
		append([]interface{}{}, components...)...)}
}

func (_c *Col_Add_Call) Run(run func(components ...domain.Component)) *Col_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]domain.Component, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(domain.Component)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Col_Add_Call) Return(_a0 domain.Col) *Col_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Col_Add_Call) RunAndReturn(run func(...domain.Component) domain.Col) *Col_Add_Call {
	_c.Call.Return(run)
	return _c
}

// GetSize provides a mock function with given fields:
func (_m *Col) GetSize() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Col_GetSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSize'
type Col_GetSize_Call struct {
	*mock.Call
}

// GetSize is a helper method to define mock.On call
func (_e *Col_Expecter) GetSize() *Col_GetSize_Call {
	return &Col_GetSize_Call{Call: _e.mock.On("GetSize")}
}

func (_c *Col_GetSize_Call) Run(run func()) *Col_GetSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Col_GetSize_Call) Return(_a0 int) *Col_GetSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Col_GetSize_Call) RunAndReturn(run func() int) *Col_GetSize_Call {
	_c.Call.Return(run)
	return _c
}

// GetStructure provides a mock function with given fields:
func (_m *Col) GetStructure() *tree.Node[domain.Structure] {
	ret := _m.Called()

	var r0 *tree.Node[domain.Structure]
	if rf, ok := ret.Get(0).(func() *tree.Node[domain.Structure]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tree.Node[domain.Structure])
		}
	}

	return r0
}

// Col_GetStructure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStructure'
type Col_GetStructure_Call struct {
	*mock.Call
}

// GetStructure is a helper method to define mock.On call
func (_e *Col_Expecter) GetStructure() *Col_GetStructure_Call {
	return &Col_GetStructure_Call{Call: _e.mock.On("GetStructure")}
}

func (_c *Col_GetStructure_Call) Run(run func()) *Col_GetStructure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Col_GetStructure_Call) Return(_a0 *tree.Node[domain.Structure]) *Col_GetStructure_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Col_GetStructure_Call) RunAndReturn(run func() *tree.Node[domain.Structure]) *Col_GetStructure_Call {
	_c.Call.Return(run)
	return _c
}

// Render provides a mock function with given fields: provider, cell, createCell
func (_m *Col) Render(provider domain.Provider, cell internal.Cell, createCell bool) {
	_m.Called(provider, cell, createCell)
}

// Col_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type Col_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
//   - provider domain.Provider
//   - cell internal.Cell
//   - createCell bool
func (_e *Col_Expecter) Render(provider interface{}, cell interface{}, createCell interface{}) *Col_Render_Call {
	return &Col_Render_Call{Call: _e.mock.On("Render", provider, cell, createCell)}
}

func (_c *Col_Render_Call) Run(run func(provider domain.Provider, cell internal.Cell, createCell bool)) *Col_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Provider), args[1].(internal.Cell), args[2].(bool))
	})
	return _c
}

func (_c *Col_Render_Call) Return() *Col_Render_Call {
	_c.Call.Return()
	return _c
}

func (_c *Col_Render_Call) RunAndReturn(run func(domain.Provider, internal.Cell, bool)) *Col_Render_Call {
	_c.Call.Return(run)
	return _c
}

// SetConfig provides a mock function with given fields: _a0
func (_m *Col) SetConfig(_a0 *config.Maroto) {
	_m.Called(_a0)
}

// Col_SetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConfig'
type Col_SetConfig_Call struct {
	*mock.Call
}

// SetConfig is a helper method to define mock.On call
//   - _a0 *config.Maroto
func (_e *Col_Expecter) SetConfig(_a0 interface{}) *Col_SetConfig_Call {
	return &Col_SetConfig_Call{Call: _e.mock.On("SetConfig", _a0)}
}

func (_c *Col_SetConfig_Call) Run(run func(_a0 *config.Maroto)) *Col_SetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.Maroto))
	})
	return _c
}

func (_c *Col_SetConfig_Call) Return() *Col_SetConfig_Call {
	_c.Call.Return()
	return _c
}

func (_c *Col_SetConfig_Call) RunAndReturn(run func(*config.Maroto)) *Col_SetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// WithStyle provides a mock function with given fields: style
func (_m *Col) WithStyle(style *props.Style) domain.Col {
	ret := _m.Called(style)

	var r0 domain.Col
	if rf, ok := ret.Get(0).(func(*props.Style) domain.Col); ok {
		r0 = rf(style)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Col)
		}
	}

	return r0
}

// Col_WithStyle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithStyle'
type Col_WithStyle_Call struct {
	*mock.Call
}

// WithStyle is a helper method to define mock.On call
//   - style *props.Style
func (_e *Col_Expecter) WithStyle(style interface{}) *Col_WithStyle_Call {
	return &Col_WithStyle_Call{Call: _e.mock.On("WithStyle", style)}
}

func (_c *Col_WithStyle_Call) Run(run func(style *props.Style)) *Col_WithStyle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*props.Style))
	})
	return _c
}

func (_c *Col_WithStyle_Call) Return(_a0 domain.Col) *Col_WithStyle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Col_WithStyle_Call) RunAndReturn(run func(*props.Style) domain.Col) *Col_WithStyle_Call {
	_c.Call.Return(run)
	return _c
}

// NewCol creates a new instance of Col. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCol(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Col {
	mock := &Col{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
