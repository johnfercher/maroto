// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/johnfercher/maroto/v2/pkg/core/entity"
	mock "github.com/stretchr/testify/mock"

	props "github.com/johnfercher/maroto/v2/pkg/props"
)

// Signature is an autogenerated mock type for the Signature type
type Signature struct {
	mock.Mock
}

type Signature_Expecter struct {
	mock *mock.Mock
}

func (_m *Signature) EXPECT() *Signature_Expecter {
	return &Signature_Expecter{mock: &_m.Mock}
}

// AddSpaceFor provides a mock function with given fields: label, cell, textProp
func (_m *Signature) AddSpaceFor(label string, cell *entity.Cell, textProp *props.Text) {
	_m.Called(label, cell, textProp)
}

// Signature_AddSpaceFor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSpaceFor'
type Signature_AddSpaceFor_Call struct {
	*mock.Call
}

// AddSpaceFor is a helper method to define mock.On call
//   - label string
//   - cell *entity.Cell
//   - textProp *props.Text
func (_e *Signature_Expecter) AddSpaceFor(label interface{}, cell interface{}, textProp interface{}) *Signature_AddSpaceFor_Call {
	return &Signature_AddSpaceFor_Call{Call: _e.mock.On("AddSpaceFor", label, cell, textProp)}
}

func (_c *Signature_AddSpaceFor_Call) Run(run func(label string, cell *entity.Cell, textProp *props.Text)) *Signature_AddSpaceFor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*entity.Cell), args[2].(*props.Text))
	})
	return _c
}

func (_c *Signature_AddSpaceFor_Call) Return() *Signature_AddSpaceFor_Call {
	_c.Call.Return()
	return _c
}

func (_c *Signature_AddSpaceFor_Call) RunAndReturn(run func(string, *entity.Cell, *props.Text)) *Signature_AddSpaceFor_Call {
	_c.Call.Return(run)
	return _c
}

// NewSignature creates a new instance of Signature. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSignature(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Signature {
	mock := &Signature{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
