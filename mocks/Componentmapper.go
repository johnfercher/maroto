// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	processorprovider "github.com/johnfercher/maroto/v2/pkg/processor/processorprovider"
	mock "github.com/stretchr/testify/mock"
)

// Componentmapper is an autogenerated mock type for the Componentmapper type
type Componentmapper struct {
	mock.Mock
}

type Componentmapper_Expecter struct {
	mock *mock.Mock
}

func (_m *Componentmapper) EXPECT() *Componentmapper_Expecter {
	return &Componentmapper_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: content, provider
func (_m *Componentmapper) Generate(content map[string]interface{}, provider processorprovider.ProcessorProvider) ([]processorprovider.ProviderComponent, error) {
	ret := _m.Called(content, provider)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 []processorprovider.ProviderComponent
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, processorprovider.ProcessorProvider) ([]processorprovider.ProviderComponent, error)); ok {
		return rf(content, provider)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}, processorprovider.ProcessorProvider) []processorprovider.ProviderComponent); ok {
		r0 = rf(content, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]processorprovider.ProviderComponent)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}, processorprovider.ProcessorProvider) error); ok {
		r1 = rf(content, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Componentmapper_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type Componentmapper_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - content map[string]interface{}
//   - provider processorprovider.ProcessorProvider
func (_e *Componentmapper_Expecter) Generate(content interface{}, provider interface{}) *Componentmapper_Generate_Call {
	return &Componentmapper_Generate_Call{Call: _e.mock.On("Generate", content, provider)}
}

func (_c *Componentmapper_Generate_Call) Run(run func(content map[string]interface{}, provider processorprovider.ProcessorProvider)) *Componentmapper_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}), args[1].(processorprovider.ProcessorProvider))
	})
	return _c
}

func (_c *Componentmapper_Generate_Call) Return(_a0 []processorprovider.ProviderComponent, _a1 error) *Componentmapper_Generate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Componentmapper_Generate_Call) RunAndReturn(run func(map[string]interface{}, processorprovider.ProcessorProvider) ([]processorprovider.ProviderComponent, error)) *Componentmapper_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// NewComponentmapper creates a new instance of Componentmapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComponentmapper(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Componentmapper {
	mock := &Componentmapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
