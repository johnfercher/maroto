// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	props "github.com/johnfercher/maroto/v2/maroto/props"
	mock "github.com/stretchr/testify/mock"
)

// Math is an autogenerated mock type for the Math type
type Math struct {
	mock.Mock
}

type Math_Expecter struct {
	mock *mock.Mock
}

func (_m *Math) EXPECT() *Math_Expecter {
	return &Math_Expecter{mock: &_m.Mock}
}

// GetCenterCorrection provides a mock function with given fields: outerSize, innerSize
func (_m *Math) GetCenterCorrection(outerSize float64, innerSize float64) float64 {
	ret := _m.Called(outerSize, innerSize)

	var r0 float64
	if rf, ok := ret.Get(0).(func(float64, float64) float64); ok {
		r0 = rf(outerSize, innerSize)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Math_GetCenterCorrection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCenterCorrection'
type Math_GetCenterCorrection_Call struct {
	*mock.Call
}

// GetCenterCorrection is a helper method to define mock.On call
//   - outerSize float64
//   - innerSize float64
func (_e *Math_Expecter) GetCenterCorrection(outerSize interface{}, innerSize interface{}) *Math_GetCenterCorrection_Call {
	return &Math_GetCenterCorrection_Call{Call: _e.mock.On("GetCenterCorrection", outerSize, innerSize)}
}

func (_c *Math_GetCenterCorrection_Call) Run(run func(outerSize float64, innerSize float64)) *Math_GetCenterCorrection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(float64))
	})
	return _c
}

func (_c *Math_GetCenterCorrection_Call) Return(_a0 float64) *Math_GetCenterCorrection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Math_GetCenterCorrection_Call) RunAndReturn(run func(float64, float64) float64) *Math_GetCenterCorrection_Call {
	_c.Call.Return(run)
	return _c
}

// GetRectCenterColProperties provides a mock function with given fields: imageWidth, imageHeight, colWidth, colHeight, xColOffset, percent
func (_m *Math) GetRectCenterColProperties(imageWidth float64, imageHeight float64, colWidth float64, colHeight float64, xColOffset float64, percent float64) (float64, float64, float64, float64) {
	ret := _m.Called(imageWidth, imageHeight, colWidth, colHeight, xColOffset, percent)

	var r0 float64
	var r1 float64
	var r2 float64
	var r3 float64
	if rf, ok := ret.Get(0).(func(float64, float64, float64, float64, float64, float64) (float64, float64, float64, float64)); ok {
		return rf(imageWidth, imageHeight, colWidth, colHeight, xColOffset, percent)
	}
	if rf, ok := ret.Get(0).(func(float64, float64, float64, float64, float64, float64) float64); ok {
		r0 = rf(imageWidth, imageHeight, colWidth, colHeight, xColOffset, percent)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(float64, float64, float64, float64, float64, float64) float64); ok {
		r1 = rf(imageWidth, imageHeight, colWidth, colHeight, xColOffset, percent)
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func(float64, float64, float64, float64, float64, float64) float64); ok {
		r2 = rf(imageWidth, imageHeight, colWidth, colHeight, xColOffset, percent)
	} else {
		r2 = ret.Get(2).(float64)
	}

	if rf, ok := ret.Get(3).(func(float64, float64, float64, float64, float64, float64) float64); ok {
		r3 = rf(imageWidth, imageHeight, colWidth, colHeight, xColOffset, percent)
	} else {
		r3 = ret.Get(3).(float64)
	}

	return r0, r1, r2, r3
}

// Math_GetRectCenterColProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRectCenterColProperties'
type Math_GetRectCenterColProperties_Call struct {
	*mock.Call
}

// GetRectCenterColProperties is a helper method to define mock.On call
//   - imageWidth float64
//   - imageHeight float64
//   - colWidth float64
//   - colHeight float64
//   - xColOffset float64
//   - percent float64
func (_e *Math_Expecter) GetRectCenterColProperties(imageWidth interface{}, imageHeight interface{}, colWidth interface{}, colHeight interface{}, xColOffset interface{}, percent interface{}) *Math_GetRectCenterColProperties_Call {
	return &Math_GetRectCenterColProperties_Call{Call: _e.mock.On("GetRectCenterColProperties", imageWidth, imageHeight, colWidth, colHeight, xColOffset, percent)}
}

func (_c *Math_GetRectCenterColProperties_Call) Run(run func(imageWidth float64, imageHeight float64, colWidth float64, colHeight float64, xColOffset float64, percent float64)) *Math_GetRectCenterColProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(float64), args[2].(float64), args[3].(float64), args[4].(float64), args[5].(float64))
	})
	return _c
}

func (_c *Math_GetRectCenterColProperties_Call) Return(x float64, y float64, w float64, h float64) *Math_GetRectCenterColProperties_Call {
	_c.Call.Return(x, y, w, h)
	return _c
}

func (_c *Math_GetRectCenterColProperties_Call) RunAndReturn(run func(float64, float64, float64, float64, float64, float64) (float64, float64, float64, float64)) *Math_GetRectCenterColProperties_Call {
	_c.Call.Return(run)
	return _c
}

// GetRectNonCenterColProperties provides a mock function with given fields: imageWidth, imageHeight, colWidth, colHeight, xColOffset, prop
func (_m *Math) GetRectNonCenterColProperties(imageWidth float64, imageHeight float64, colWidth float64, colHeight float64, xColOffset float64, prop props.Rect) (float64, float64, float64, float64) {
	ret := _m.Called(imageWidth, imageHeight, colWidth, colHeight, xColOffset, prop)

	var r0 float64
	var r1 float64
	var r2 float64
	var r3 float64
	if rf, ok := ret.Get(0).(func(float64, float64, float64, float64, float64, props.Rect) (float64, float64, float64, float64)); ok {
		return rf(imageWidth, imageHeight, colWidth, colHeight, xColOffset, prop)
	}
	if rf, ok := ret.Get(0).(func(float64, float64, float64, float64, float64, props.Rect) float64); ok {
		r0 = rf(imageWidth, imageHeight, colWidth, colHeight, xColOffset, prop)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(float64, float64, float64, float64, float64, props.Rect) float64); ok {
		r1 = rf(imageWidth, imageHeight, colWidth, colHeight, xColOffset, prop)
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func(float64, float64, float64, float64, float64, props.Rect) float64); ok {
		r2 = rf(imageWidth, imageHeight, colWidth, colHeight, xColOffset, prop)
	} else {
		r2 = ret.Get(2).(float64)
	}

	if rf, ok := ret.Get(3).(func(float64, float64, float64, float64, float64, props.Rect) float64); ok {
		r3 = rf(imageWidth, imageHeight, colWidth, colHeight, xColOffset, prop)
	} else {
		r3 = ret.Get(3).(float64)
	}

	return r0, r1, r2, r3
}

// Math_GetRectNonCenterColProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRectNonCenterColProperties'
type Math_GetRectNonCenterColProperties_Call struct {
	*mock.Call
}

// GetRectNonCenterColProperties is a helper method to define mock.On call
//   - imageWidth float64
//   - imageHeight float64
//   - colWidth float64
//   - colHeight float64
//   - xColOffset float64
//   - prop props.Rect
func (_e *Math_Expecter) GetRectNonCenterColProperties(imageWidth interface{}, imageHeight interface{}, colWidth interface{}, colHeight interface{}, xColOffset interface{}, prop interface{}) *Math_GetRectNonCenterColProperties_Call {
	return &Math_GetRectNonCenterColProperties_Call{Call: _e.mock.On("GetRectNonCenterColProperties", imageWidth, imageHeight, colWidth, colHeight, xColOffset, prop)}
}

func (_c *Math_GetRectNonCenterColProperties_Call) Run(run func(imageWidth float64, imageHeight float64, colWidth float64, colHeight float64, xColOffset float64, prop props.Rect)) *Math_GetRectNonCenterColProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(float64), args[2].(float64), args[3].(float64), args[4].(float64), args[5].(props.Rect))
	})
	return _c
}

func (_c *Math_GetRectNonCenterColProperties_Call) Return(x float64, y float64, w float64, h float64) *Math_GetRectNonCenterColProperties_Call {
	_c.Call.Return(x, y, w, h)
	return _c
}

func (_c *Math_GetRectNonCenterColProperties_Call) RunAndReturn(run func(float64, float64, float64, float64, float64, props.Rect) (float64, float64, float64, float64)) *Math_GetRectNonCenterColProperties_Call {
	_c.Call.Return(run)
	return _c
}

// NewMath creates a new instance of Math. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMath(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Math {
	mock := &Math{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
