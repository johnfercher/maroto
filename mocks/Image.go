// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	internal "github.com/johnfercher/maroto/v2/internal"
	consts "github.com/johnfercher/maroto/v2/maroto/consts"

	mock "github.com/stretchr/testify/mock"

	props "github.com/johnfercher/maroto/v2/maroto/props"
)

// Image is an autogenerated mock type for the Image type
type Image struct {
	mock.Mock
}

type Image_Expecter struct {
	mock *mock.Mock
}

func (_m *Image) EXPECT() *Image_Expecter {
	return &Image_Expecter{mock: &_m.Mock}
}

// AddFromBase64 provides a mock function with given fields: stringBase64, cell, prop, extension
func (_m *Image) AddFromBase64(stringBase64 string, cell internal.Cell, prop props.Rect, extension consts.Extension) error {
	ret := _m.Called(stringBase64, cell, prop, extension)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, internal.Cell, props.Rect, consts.Extension) error); ok {
		r0 = rf(stringBase64, cell, prop, extension)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Image_AddFromBase64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFromBase64'
type Image_AddFromBase64_Call struct {
	*mock.Call
}

// AddFromBase64 is a helper method to define mock.On call
//   - stringBase64 string
//   - cell internal.Cell
//   - prop props.Rect
//   - extension consts.Extension
func (_e *Image_Expecter) AddFromBase64(stringBase64 interface{}, cell interface{}, prop interface{}, extension interface{}) *Image_AddFromBase64_Call {
	return &Image_AddFromBase64_Call{Call: _e.mock.On("AddFromBase64", stringBase64, cell, prop, extension)}
}

func (_c *Image_AddFromBase64_Call) Run(run func(stringBase64 string, cell internal.Cell, prop props.Rect, extension consts.Extension)) *Image_AddFromBase64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(internal.Cell), args[2].(props.Rect), args[3].(consts.Extension))
	})
	return _c
}

func (_c *Image_AddFromBase64_Call) Return(err error) *Image_AddFromBase64_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Image_AddFromBase64_Call) RunAndReturn(run func(string, internal.Cell, props.Rect, consts.Extension) error) *Image_AddFromBase64_Call {
	_c.Call.Return(run)
	return _c
}

// AddFromFile provides a mock function with given fields: path, cell, prop
func (_m *Image) AddFromFile(path string, cell internal.Cell, prop props.Rect) error {
	ret := _m.Called(path, cell, prop)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, internal.Cell, props.Rect) error); ok {
		r0 = rf(path, cell, prop)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Image_AddFromFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFromFile'
type Image_AddFromFile_Call struct {
	*mock.Call
}

// AddFromFile is a helper method to define mock.On call
//   - path string
//   - cell internal.Cell
//   - prop props.Rect
func (_e *Image_Expecter) AddFromFile(path interface{}, cell interface{}, prop interface{}) *Image_AddFromFile_Call {
	return &Image_AddFromFile_Call{Call: _e.mock.On("AddFromFile", path, cell, prop)}
}

func (_c *Image_AddFromFile_Call) Run(run func(path string, cell internal.Cell, prop props.Rect)) *Image_AddFromFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(internal.Cell), args[2].(props.Rect))
	})
	return _c
}

func (_c *Image_AddFromFile_Call) Return(err error) *Image_AddFromFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Image_AddFromFile_Call) RunAndReturn(run func(string, internal.Cell, props.Rect) error) *Image_AddFromFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewImage creates a new instance of Image. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImage(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Image {
	mock := &Image{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
