// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	consts "github.com/johnfercher/maroto/pkg/consts"
	cache "github.com/johnfercher/maroto/pkg/v2/cache"

	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

type Cache_Expecter struct {
	mock *mock.Mock
}

func (_m *Cache) EXPECT() *Cache_Expecter {
	return &Cache_Expecter{mock: &_m.Mock}
}

// Load provides a mock function with given fields: _a0, _a1
func (_m *Cache) Load(_a0 string, _a1 consts.Extension) (*cache.Image, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *cache.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(string, consts.Extension) (*cache.Image, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, consts.Extension) *cache.Image); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cache.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(string, consts.Extension) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type Cache_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - _a0 string
//   - _a1 consts.Extension
func (_e *Cache_Expecter) Load(_a0 interface{}, _a1 interface{}) *Cache_Load_Call {
	return &Cache_Load_Call{Call: _e.mock.On("Load", _a0, _a1)}
}

func (_c *Cache_Load_Call) Run(run func(_a0 string, _a1 consts.Extension)) *Cache_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(consts.Extension))
	})
	return _c
}

func (_c *Cache_Load_Call) Return(_a0 *cache.Image, _a1 error) *Cache_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Cache_Load_Call) RunAndReturn(run func(string, consts.Extension) (*cache.Image, error)) *Cache_Load_Call {
	_c.Call.Return(run)
	return _c
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
