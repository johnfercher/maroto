// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	color "github.com/johnfercher/maroto/pkg/color"
	consts "github.com/johnfercher/maroto/pkg/consts"

	mock "github.com/stretchr/testify/mock"
)

// Font is an autogenerated mock type for the Font type
type Font struct {
	mock.Mock
}

type Font_Expecter struct {
	mock *mock.Mock
}

func (_m *Font) EXPECT() *Font_Expecter {
	return &Font_Expecter{mock: &_m.Mock}
}

// GetColor provides a mock function with given fields:
func (_m *Font) GetColor() color.Color {
	ret := _m.Called()

	var r0 color.Color
	if rf, ok := ret.Get(0).(func() color.Color); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(color.Color)
	}

	return r0
}

// Font_GetColor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetColor'
type Font_GetColor_Call struct {
	*mock.Call
}

// GetColor is a helper method to define mock.On call
func (_e *Font_Expecter) GetColor() *Font_GetColor_Call {
	return &Font_GetColor_Call{Call: _e.mock.On("GetColor")}
}

func (_c *Font_GetColor_Call) Run(run func()) *Font_GetColor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Font_GetColor_Call) Return(_a0 color.Color) *Font_GetColor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Font_GetColor_Call) RunAndReturn(run func() color.Color) *Font_GetColor_Call {
	_c.Call.Return(run)
	return _c
}

// GetFamily provides a mock function with given fields:
func (_m *Font) GetFamily() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Font_GetFamily_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFamily'
type Font_GetFamily_Call struct {
	*mock.Call
}

// GetFamily is a helper method to define mock.On call
func (_e *Font_Expecter) GetFamily() *Font_GetFamily_Call {
	return &Font_GetFamily_Call{Call: _e.mock.On("GetFamily")}
}

func (_c *Font_GetFamily_Call) Run(run func()) *Font_GetFamily_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Font_GetFamily_Call) Return(_a0 string) *Font_GetFamily_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Font_GetFamily_Call) RunAndReturn(run func() string) *Font_GetFamily_Call {
	_c.Call.Return(run)
	return _c
}

// GetFont provides a mock function with given fields:
func (_m *Font) GetFont() (string, consts.Style, float64) {
	ret := _m.Called()

	var r0 string
	var r1 consts.Style
	var r2 float64
	if rf, ok := ret.Get(0).(func() (string, consts.Style, float64)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() consts.Style); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(consts.Style)
	}

	if rf, ok := ret.Get(2).(func() float64); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(float64)
	}

	return r0, r1, r2
}

// Font_GetFont_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFont'
type Font_GetFont_Call struct {
	*mock.Call
}

// GetFont is a helper method to define mock.On call
func (_e *Font_Expecter) GetFont() *Font_GetFont_Call {
	return &Font_GetFont_Call{Call: _e.mock.On("GetFont")}
}

func (_c *Font_GetFont_Call) Run(run func()) *Font_GetFont_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Font_GetFont_Call) Return(_a0 string, _a1 consts.Style, _a2 float64) *Font_GetFont_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Font_GetFont_Call) RunAndReturn(run func() (string, consts.Style, float64)) *Font_GetFont_Call {
	_c.Call.Return(run)
	return _c
}

// GetScaleFactor provides a mock function with given fields:
func (_m *Font) GetScaleFactor() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Font_GetScaleFactor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScaleFactor'
type Font_GetScaleFactor_Call struct {
	*mock.Call
}

// GetScaleFactor is a helper method to define mock.On call
func (_e *Font_Expecter) GetScaleFactor() *Font_GetScaleFactor_Call {
	return &Font_GetScaleFactor_Call{Call: _e.mock.On("GetScaleFactor")}
}

func (_c *Font_GetScaleFactor_Call) Run(run func()) *Font_GetScaleFactor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Font_GetScaleFactor_Call) Return(scaleFactor float64) *Font_GetScaleFactor_Call {
	_c.Call.Return(scaleFactor)
	return _c
}

func (_c *Font_GetScaleFactor_Call) RunAndReturn(run func() float64) *Font_GetScaleFactor_Call {
	_c.Call.Return(run)
	return _c
}

// GetSize provides a mock function with given fields:
func (_m *Font) GetSize() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Font_GetSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSize'
type Font_GetSize_Call struct {
	*mock.Call
}

// GetSize is a helper method to define mock.On call
func (_e *Font_Expecter) GetSize() *Font_GetSize_Call {
	return &Font_GetSize_Call{Call: _e.mock.On("GetSize")}
}

func (_c *Font_GetSize_Call) Run(run func()) *Font_GetSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Font_GetSize_Call) Return(_a0 float64) *Font_GetSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Font_GetSize_Call) RunAndReturn(run func() float64) *Font_GetSize_Call {
	_c.Call.Return(run)
	return _c
}

// GetStyle provides a mock function with given fields:
func (_m *Font) GetStyle() consts.Style {
	ret := _m.Called()

	var r0 consts.Style
	if rf, ok := ret.Get(0).(func() consts.Style); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(consts.Style)
	}

	return r0
}

// Font_GetStyle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStyle'
type Font_GetStyle_Call struct {
	*mock.Call
}

// GetStyle is a helper method to define mock.On call
func (_e *Font_Expecter) GetStyle() *Font_GetStyle_Call {
	return &Font_GetStyle_Call{Call: _e.mock.On("GetStyle")}
}

func (_c *Font_GetStyle_Call) Run(run func()) *Font_GetStyle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Font_GetStyle_Call) Return(_a0 consts.Style) *Font_GetStyle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Font_GetStyle_Call) RunAndReturn(run func() consts.Style) *Font_GetStyle_Call {
	_c.Call.Return(run)
	return _c
}

// SetColor provides a mock function with given fields: _a0
func (_m *Font) SetColor(_a0 color.Color) {
	_m.Called(_a0)
}

// Font_SetColor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetColor'
type Font_SetColor_Call struct {
	*mock.Call
}

// SetColor is a helper method to define mock.On call
//   - _a0 color.Color
func (_e *Font_Expecter) SetColor(_a0 interface{}) *Font_SetColor_Call {
	return &Font_SetColor_Call{Call: _e.mock.On("SetColor", _a0)}
}

func (_c *Font_SetColor_Call) Run(run func(_a0 color.Color)) *Font_SetColor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(color.Color))
	})
	return _c
}

func (_c *Font_SetColor_Call) Return() *Font_SetColor_Call {
	_c.Call.Return()
	return _c
}

func (_c *Font_SetColor_Call) RunAndReturn(run func(color.Color)) *Font_SetColor_Call {
	_c.Call.Return(run)
	return _c
}

// SetFamily provides a mock function with given fields: family
func (_m *Font) SetFamily(family string) {
	_m.Called(family)
}

// Font_SetFamily_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFamily'
type Font_SetFamily_Call struct {
	*mock.Call
}

// SetFamily is a helper method to define mock.On call
//   - family string
func (_e *Font_Expecter) SetFamily(family interface{}) *Font_SetFamily_Call {
	return &Font_SetFamily_Call{Call: _e.mock.On("SetFamily", family)}
}

func (_c *Font_SetFamily_Call) Run(run func(family string)) *Font_SetFamily_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Font_SetFamily_Call) Return() *Font_SetFamily_Call {
	_c.Call.Return()
	return _c
}

func (_c *Font_SetFamily_Call) RunAndReturn(run func(string)) *Font_SetFamily_Call {
	_c.Call.Return(run)
	return _c
}

// SetFont provides a mock function with given fields: family, style, size
func (_m *Font) SetFont(family string, style consts.Style, size float64) {
	_m.Called(family, style, size)
}

// Font_SetFont_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFont'
type Font_SetFont_Call struct {
	*mock.Call
}

// SetFont is a helper method to define mock.On call
//   - family string
//   - style consts.Style
//   - size float64
func (_e *Font_Expecter) SetFont(family interface{}, style interface{}, size interface{}) *Font_SetFont_Call {
	return &Font_SetFont_Call{Call: _e.mock.On("SetFont", family, style, size)}
}

func (_c *Font_SetFont_Call) Run(run func(family string, style consts.Style, size float64)) *Font_SetFont_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(consts.Style), args[2].(float64))
	})
	return _c
}

func (_c *Font_SetFont_Call) Return() *Font_SetFont_Call {
	_c.Call.Return()
	return _c
}

func (_c *Font_SetFont_Call) RunAndReturn(run func(string, consts.Style, float64)) *Font_SetFont_Call {
	_c.Call.Return(run)
	return _c
}

// SetSize provides a mock function with given fields: size
func (_m *Font) SetSize(size float64) {
	_m.Called(size)
}

// Font_SetSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSize'
type Font_SetSize_Call struct {
	*mock.Call
}

// SetSize is a helper method to define mock.On call
//   - size float64
func (_e *Font_Expecter) SetSize(size interface{}) *Font_SetSize_Call {
	return &Font_SetSize_Call{Call: _e.mock.On("SetSize", size)}
}

func (_c *Font_SetSize_Call) Run(run func(size float64)) *Font_SetSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *Font_SetSize_Call) Return() *Font_SetSize_Call {
	_c.Call.Return()
	return _c
}

func (_c *Font_SetSize_Call) RunAndReturn(run func(float64)) *Font_SetSize_Call {
	_c.Call.Return(run)
	return _c
}

// SetStyle provides a mock function with given fields: style
func (_m *Font) SetStyle(style consts.Style) {
	_m.Called(style)
}

// Font_SetStyle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStyle'
type Font_SetStyle_Call struct {
	*mock.Call
}

// SetStyle is a helper method to define mock.On call
//   - style consts.Style
func (_e *Font_Expecter) SetStyle(style interface{}) *Font_SetStyle_Call {
	return &Font_SetStyle_Call{Call: _e.mock.On("SetStyle", style)}
}

func (_c *Font_SetStyle_Call) Run(run func(style consts.Style)) *Font_SetStyle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(consts.Style))
	})
	return _c
}

func (_c *Font_SetStyle_Call) Return() *Font_SetStyle_Call {
	_c.Call.Return()
	return _c
}

func (_c *Font_SetStyle_Call) RunAndReturn(run func(consts.Style)) *Font_SetStyle_Call {
	_c.Call.Return(run)
	return _c
}

// NewFont creates a new instance of Font. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFont(t interface {
	mock.TestingT
	Cleanup(func())
}) *Font {
	mock := &Font{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
