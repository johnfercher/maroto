// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/johnfercher/maroto/v2/pkg/core/entity"
	"github.com/johnfercher/maroto/v2/pkg/props"
	mock "github.com/stretchr/testify/mock"
)

// HeatMap is an autogenerated mock type for the HeatMap type
type HeatMap struct {
	mock.Mock
}

type HeatMap_Expecter struct {
	mock *mock.Mock
}

func (_m *HeatMap) EXPECT() *HeatMap_Expecter {
	return &HeatMap_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: heatMap, max, cell, margins
func (_m *HeatMap) Add(heatMap [][]int, cell *entity.Cell, margins *entity.Margins, prop *props.HeatMap) {
	_m.Called(heatMap, prop, cell, margins)
}

// HeatMap_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type HeatMap_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - heatMap [][]int
//   - max int
//   - cell *entity.Cell
//   - margins *entity.Margins
func (_e *HeatMap_Expecter) Add(heatMap interface{}, max interface{}, cell interface{}, margins interface{}) *HeatMap_Add_Call {
	return &HeatMap_Add_Call{Call: _e.mock.On("Add", heatMap, max, cell, margins)}
}

func (_c *HeatMap_Add_Call) Run(run func(heatMap [][]int, max int, cell *entity.Cell, margins *entity.Margins)) *HeatMap_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([][]int), args[1].(int), args[2].(*entity.Cell), args[3].(*entity.Margins))
	})
	return _c
}

func (_c *HeatMap_Add_Call) Return() *HeatMap_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *HeatMap_Add_Call) RunAndReturn(run func([][]int, int, *entity.Cell, *entity.Margins)) *HeatMap_Add_Call {
	_c.Run(run)
	return _c
}

// NewHeatMap creates a new instance of HeatMap. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHeatMap(t interface {
	mock.TestingT
	Cleanup(func())
},
) *HeatMap {
	mock := &HeatMap{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
