// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/johnfercher/maroto/pkg/v2/domain"
	mock "github.com/stretchr/testify/mock"
)

// ProviderOption is an autogenerated mock type for the ProviderOption type
type ProviderOption struct {
	mock.Mock
}

type ProviderOption_Expecter struct {
	mock *mock.Mock
}

func (_m *ProviderOption) EXPECT() *ProviderOption_Expecter {
	return &ProviderOption_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: p
func (_m *ProviderOption) Execute(p domain.Provider) {
	_m.Called(p)
}

// ProviderOption_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ProviderOption_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - p domain.Provider
func (_e *ProviderOption_Expecter) Execute(p interface{}) *ProviderOption_Execute_Call {
	return &ProviderOption_Execute_Call{Call: _e.mock.On("Execute", p)}
}

func (_c *ProviderOption_Execute_Call) Run(run func(p domain.Provider)) *ProviderOption_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Provider))
	})
	return _c
}

func (_c *ProviderOption_Execute_Call) Return() *ProviderOption_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *ProviderOption_Execute_Call) RunAndReturn(run func(domain.Provider)) *ProviderOption_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewProviderOption creates a new instance of ProviderOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProviderOption(t interface {
	mock.TestingT
	Cleanup(func())
},
) *ProviderOption {
	mock := &ProviderOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
