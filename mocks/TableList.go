// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	internal "github.com/johnfercher/maroto/internal"
	mock "github.com/stretchr/testify/mock"

	props "github.com/johnfercher/maroto/pkg/props"
)

// TableList is an autogenerated mock type for the TableList type
type TableList struct {
	mock.Mock
}

type TableList_Expecter struct {
	mock *mock.Mock
}

func (_m *TableList) EXPECT() *TableList_Expecter {
	return &TableList_Expecter{mock: &_m.Mock}
}

// BindGrid provides a mock function with given fields: part
func (_m *TableList) BindGrid(part internal.MarotoGridPart) {
	_m.Called(part)
}

// TableList_BindGrid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindGrid'
type TableList_BindGrid_Call struct {
	*mock.Call
}

// BindGrid is a helper method to define mock.On call
//   - part internal.MarotoGridPart
func (_e *TableList_Expecter) BindGrid(part interface{}) *TableList_BindGrid_Call {
	return &TableList_BindGrid_Call{Call: _e.mock.On("BindGrid", part)}
}

func (_c *TableList_BindGrid_Call) Run(run func(part internal.MarotoGridPart)) *TableList_BindGrid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(internal.MarotoGridPart))
	})
	return _c
}

func (_c *TableList_BindGrid_Call) Return() *TableList_BindGrid_Call {
	_c.Call.Return()
	return _c
}

func (_c *TableList_BindGrid_Call) RunAndReturn(run func(internal.MarotoGridPart)) *TableList_BindGrid_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: header, contents, defaultFontFamily, prop
func (_m *TableList) Create(header []string, contents [][]string, defaultFontFamily string, prop ...props.TableList) {
	_va := make([]interface{}, len(prop))
	for _i := range prop {
		_va[_i] = prop[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, header, contents, defaultFontFamily)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// TableList_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TableList_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - header []string
//   - contents [][]string
//   - defaultFontFamily string
//   - prop ...props.TableList
func (_e *TableList_Expecter) Create(header interface{}, contents interface{}, defaultFontFamily interface{}, prop ...interface{}) *TableList_Create_Call {
	return &TableList_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{header, contents, defaultFontFamily}, prop...)...)}
}

func (_c *TableList_Create_Call) Run(run func(header []string, contents [][]string, defaultFontFamily string, prop ...props.TableList)) *TableList_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]props.TableList, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(props.TableList)
			}
		}
		run(args[0].([]string), args[1].([][]string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *TableList_Create_Call) Return() *TableList_Create_Call {
	_c.Call.Return()
	return _c
}

func (_c *TableList_Create_Call) RunAndReturn(run func([]string, [][]string, string, ...props.TableList)) *TableList_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewTableList creates a new instance of TableList. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTableList(t interface {
	mock.TestingT
	Cleanup(func())
}) *TableList {
	mock := &TableList{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
