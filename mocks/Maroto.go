// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	bytes "bytes"

	color "github.com/johnfercher/maroto/pkg/color"
	consts "github.com/johnfercher/maroto/pkg/consts"

	mock "github.com/stretchr/testify/mock"

	props "github.com/johnfercher/maroto/pkg/props"

	time "time"
)

// Maroto is an autogenerated mock type for the Maroto type
type Maroto struct {
	mock.Mock
}

type Maroto_Expecter struct {
	mock *mock.Mock
}

func (_m *Maroto) EXPECT() *Maroto_Expecter {
	return &Maroto_Expecter{mock: &_m.Mock}
}

// AddPage provides a mock function with given fields:
func (_m *Maroto) AddPage() {
	_m.Called()
}

// Maroto_AddPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPage'
type Maroto_AddPage_Call struct {
	*mock.Call
}

// AddPage is a helper method to define mock.On call
func (_e *Maroto_Expecter) AddPage() *Maroto_AddPage_Call {
	return &Maroto_AddPage_Call{Call: _e.mock.On("AddPage")}
}

func (_c *Maroto_AddPage_Call) Run(run func()) *Maroto_AddPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Maroto_AddPage_Call) Return() *Maroto_AddPage_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_AddPage_Call) RunAndReturn(run func()) *Maroto_AddPage_Call {
	_c.Call.Return(run)
	return _c
}

// AddUTF8Font provides a mock function with given fields: familyStr, styleStr, fileStr
func (_m *Maroto) AddUTF8Font(familyStr string, styleStr consts.Style, fileStr string) {
	_m.Called(familyStr, styleStr, fileStr)
}

// Maroto_AddUTF8Font_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUTF8Font'
type Maroto_AddUTF8Font_Call struct {
	*mock.Call
}

// AddUTF8Font is a helper method to define mock.On call
//   - familyStr string
//   - styleStr consts.Style
//   - fileStr string
func (_e *Maroto_Expecter) AddUTF8Font(familyStr interface{}, styleStr interface{}, fileStr interface{}) *Maroto_AddUTF8Font_Call {
	return &Maroto_AddUTF8Font_Call{Call: _e.mock.On("AddUTF8Font", familyStr, styleStr, fileStr)}
}

func (_c *Maroto_AddUTF8Font_Call) Run(run func(familyStr string, styleStr consts.Style, fileStr string)) *Maroto_AddUTF8Font_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(consts.Style), args[2].(string))
	})
	return _c
}

func (_c *Maroto_AddUTF8Font_Call) Return() *Maroto_AddUTF8Font_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_AddUTF8Font_Call) RunAndReturn(run func(string, consts.Style, string)) *Maroto_AddUTF8Font_Call {
	_c.Call.Return(run)
	return _c
}

// Barcode provides a mock function with given fields: code, prop
func (_m *Maroto) Barcode(code string, prop ...props.Barcode) error {
	_va := make([]interface{}, len(prop))
	for _i := range prop {
		_va[_i] = prop[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, code)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...props.Barcode) error); ok {
		r0 = rf(code, prop...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Maroto_Barcode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Barcode'
type Maroto_Barcode_Call struct {
	*mock.Call
}

// Barcode is a helper method to define mock.On call
//   - code string
//   - prop ...props.Barcode
func (_e *Maroto_Expecter) Barcode(code interface{}, prop ...interface{}) *Maroto_Barcode_Call {
	return &Maroto_Barcode_Call{Call: _e.mock.On("Barcode",
		append([]interface{}{code}, prop...)...)}
}

func (_c *Maroto_Barcode_Call) Run(run func(code string, prop ...props.Barcode)) *Maroto_Barcode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]props.Barcode, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(props.Barcode)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Maroto_Barcode_Call) Return(_a0 error) *Maroto_Barcode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Maroto_Barcode_Call) RunAndReturn(run func(string, ...props.Barcode) error) *Maroto_Barcode_Call {
	_c.Call.Return(run)
	return _c
}

// Base64Image provides a mock function with given fields: base64, extension, prop
func (_m *Maroto) Base64Image(base64 string, extension consts.Extension, prop ...props.Rect) error {
	_va := make([]interface{}, len(prop))
	for _i := range prop {
		_va[_i] = prop[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, base64, extension)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, consts.Extension, ...props.Rect) error); ok {
		r0 = rf(base64, extension, prop...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Maroto_Base64Image_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Base64Image'
type Maroto_Base64Image_Call struct {
	*mock.Call
}

// Base64Image is a helper method to define mock.On call
//   - base64 string
//   - extension consts.Extension
//   - prop ...props.Rect
func (_e *Maroto_Expecter) Base64Image(base64 interface{}, extension interface{}, prop ...interface{}) *Maroto_Base64Image_Call {
	return &Maroto_Base64Image_Call{Call: _e.mock.On("Base64Image",
		append([]interface{}{base64, extension}, prop...)...)}
}

func (_c *Maroto_Base64Image_Call) Run(run func(base64 string, extension consts.Extension, prop ...props.Rect)) *Maroto_Base64Image_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]props.Rect, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(props.Rect)
			}
		}
		run(args[0].(string), args[1].(consts.Extension), variadicArgs...)
	})
	return _c
}

func (_c *Maroto_Base64Image_Call) Return(err error) *Maroto_Base64Image_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Maroto_Base64Image_Call) RunAndReturn(run func(string, consts.Extension, ...props.Rect) error) *Maroto_Base64Image_Call {
	_c.Call.Return(run)
	return _c
}

// Col provides a mock function with given fields: width, closure
func (_m *Maroto) Col(width uint, closure func()) {
	_m.Called(width, closure)
}

// Maroto_Col_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Col'
type Maroto_Col_Call struct {
	*mock.Call
}

// Col is a helper method to define mock.On call
//   - width uint
//   - closure func()
func (_e *Maroto_Expecter) Col(width interface{}, closure interface{}) *Maroto_Col_Call {
	return &Maroto_Col_Call{Call: _e.mock.On("Col", width, closure)}
}

func (_c *Maroto_Col_Call) Run(run func(width uint, closure func())) *Maroto_Col_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(func()))
	})
	return _c
}

func (_c *Maroto_Col_Call) Return() *Maroto_Col_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_Col_Call) RunAndReturn(run func(uint, func())) *Maroto_Col_Call {
	_c.Call.Return(run)
	return _c
}

// ColSpace provides a mock function with given fields: gridSize
func (_m *Maroto) ColSpace(gridSize uint) {
	_m.Called(gridSize)
}

// Maroto_ColSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ColSpace'
type Maroto_ColSpace_Call struct {
	*mock.Call
}

// ColSpace is a helper method to define mock.On call
//   - gridSize uint
func (_e *Maroto_Expecter) ColSpace(gridSize interface{}) *Maroto_ColSpace_Call {
	return &Maroto_ColSpace_Call{Call: _e.mock.On("ColSpace", gridSize)}
}

func (_c *Maroto_ColSpace_Call) Run(run func(gridSize uint)) *Maroto_ColSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *Maroto_ColSpace_Call) Return() *Maroto_ColSpace_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_ColSpace_Call) RunAndReturn(run func(uint)) *Maroto_ColSpace_Call {
	_c.Call.Return(run)
	return _c
}

// DataMatrixCode provides a mock function with given fields: code, prop
func (_m *Maroto) DataMatrixCode(code string, prop ...props.Rect) {
	_va := make([]interface{}, len(prop))
	for _i := range prop {
		_va[_i] = prop[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, code)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Maroto_DataMatrixCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DataMatrixCode'
type Maroto_DataMatrixCode_Call struct {
	*mock.Call
}

// DataMatrixCode is a helper method to define mock.On call
//   - code string
//   - prop ...props.Rect
func (_e *Maroto_Expecter) DataMatrixCode(code interface{}, prop ...interface{}) *Maroto_DataMatrixCode_Call {
	return &Maroto_DataMatrixCode_Call{Call: _e.mock.On("DataMatrixCode",
		append([]interface{}{code}, prop...)...)}
}

func (_c *Maroto_DataMatrixCode_Call) Run(run func(code string, prop ...props.Rect)) *Maroto_DataMatrixCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]props.Rect, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(props.Rect)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Maroto_DataMatrixCode_Call) Return() *Maroto_DataMatrixCode_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_DataMatrixCode_Call) RunAndReturn(run func(string, ...props.Rect)) *Maroto_DataMatrixCode_Call {
	_c.Call.Return(run)
	return _c
}

// FileImage provides a mock function with given fields: filePathName, prop
func (_m *Maroto) FileImage(filePathName string, prop ...props.Rect) error {
	_va := make([]interface{}, len(prop))
	for _i := range prop {
		_va[_i] = prop[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filePathName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...props.Rect) error); ok {
		r0 = rf(filePathName, prop...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Maroto_FileImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileImage'
type Maroto_FileImage_Call struct {
	*mock.Call
}

// FileImage is a helper method to define mock.On call
//   - filePathName string
//   - prop ...props.Rect
func (_e *Maroto_Expecter) FileImage(filePathName interface{}, prop ...interface{}) *Maroto_FileImage_Call {
	return &Maroto_FileImage_Call{Call: _e.mock.On("FileImage",
		append([]interface{}{filePathName}, prop...)...)}
}

func (_c *Maroto_FileImage_Call) Run(run func(filePathName string, prop ...props.Rect)) *Maroto_FileImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]props.Rect, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(props.Rect)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Maroto_FileImage_Call) Return(err error) *Maroto_FileImage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Maroto_FileImage_Call) RunAndReturn(run func(string, ...props.Rect) error) *Maroto_FileImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetBorder provides a mock function with given fields:
func (_m *Maroto) GetBorder() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Maroto_GetBorder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBorder'
type Maroto_GetBorder_Call struct {
	*mock.Call
}

// GetBorder is a helper method to define mock.On call
func (_e *Maroto_Expecter) GetBorder() *Maroto_GetBorder_Call {
	return &Maroto_GetBorder_Call{Call: _e.mock.On("GetBorder")}
}

func (_c *Maroto_GetBorder_Call) Run(run func()) *Maroto_GetBorder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Maroto_GetBorder_Call) Return(_a0 bool) *Maroto_GetBorder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Maroto_GetBorder_Call) RunAndReturn(run func() bool) *Maroto_GetBorder_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentOffset provides a mock function with given fields:
func (_m *Maroto) GetCurrentOffset() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Maroto_GetCurrentOffset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentOffset'
type Maroto_GetCurrentOffset_Call struct {
	*mock.Call
}

// GetCurrentOffset is a helper method to define mock.On call
func (_e *Maroto_Expecter) GetCurrentOffset() *Maroto_GetCurrentOffset_Call {
	return &Maroto_GetCurrentOffset_Call{Call: _e.mock.On("GetCurrentOffset")}
}

func (_c *Maroto_GetCurrentOffset_Call) Run(run func()) *Maroto_GetCurrentOffset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Maroto_GetCurrentOffset_Call) Return(_a0 float64) *Maroto_GetCurrentOffset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Maroto_GetCurrentOffset_Call) RunAndReturn(run func() float64) *Maroto_GetCurrentOffset_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentPage provides a mock function with given fields:
func (_m *Maroto) GetCurrentPage() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Maroto_GetCurrentPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentPage'
type Maroto_GetCurrentPage_Call struct {
	*mock.Call
}

// GetCurrentPage is a helper method to define mock.On call
func (_e *Maroto_Expecter) GetCurrentPage() *Maroto_GetCurrentPage_Call {
	return &Maroto_GetCurrentPage_Call{Call: _e.mock.On("GetCurrentPage")}
}

func (_c *Maroto_GetCurrentPage_Call) Run(run func()) *Maroto_GetCurrentPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Maroto_GetCurrentPage_Call) Return(_a0 int) *Maroto_GetCurrentPage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Maroto_GetCurrentPage_Call) RunAndReturn(run func() int) *Maroto_GetCurrentPage_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultFontFamily provides a mock function with given fields:
func (_m *Maroto) GetDefaultFontFamily() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Maroto_GetDefaultFontFamily_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultFontFamily'
type Maroto_GetDefaultFontFamily_Call struct {
	*mock.Call
}

// GetDefaultFontFamily is a helper method to define mock.On call
func (_e *Maroto_Expecter) GetDefaultFontFamily() *Maroto_GetDefaultFontFamily_Call {
	return &Maroto_GetDefaultFontFamily_Call{Call: _e.mock.On("GetDefaultFontFamily")}
}

func (_c *Maroto_GetDefaultFontFamily_Call) Run(run func()) *Maroto_GetDefaultFontFamily_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Maroto_GetDefaultFontFamily_Call) Return(_a0 string) *Maroto_GetDefaultFontFamily_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Maroto_GetDefaultFontFamily_Call) RunAndReturn(run func() string) *Maroto_GetDefaultFontFamily_Call {
	_c.Call.Return(run)
	return _c
}

// GetPageMargins provides a mock function with given fields:
func (_m *Maroto) GetPageMargins() (float64, float64, float64, float64) {
	ret := _m.Called()

	var r0 float64
	var r1 float64
	var r2 float64
	var r3 float64
	if rf, ok := ret.Get(0).(func() (float64, float64, float64, float64)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() float64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func() float64); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(float64)
	}

	if rf, ok := ret.Get(3).(func() float64); ok {
		r3 = rf()
	} else {
		r3 = ret.Get(3).(float64)
	}

	return r0, r1, r2, r3
}

// Maroto_GetPageMargins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPageMargins'
type Maroto_GetPageMargins_Call struct {
	*mock.Call
}

// GetPageMargins is a helper method to define mock.On call
func (_e *Maroto_Expecter) GetPageMargins() *Maroto_GetPageMargins_Call {
	return &Maroto_GetPageMargins_Call{Call: _e.mock.On("GetPageMargins")}
}

func (_c *Maroto_GetPageMargins_Call) Run(run func()) *Maroto_GetPageMargins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Maroto_GetPageMargins_Call) Return(left float64, top float64, right float64, bottom float64) *Maroto_GetPageMargins_Call {
	_c.Call.Return(left, top, right, bottom)
	return _c
}

func (_c *Maroto_GetPageMargins_Call) RunAndReturn(run func() (float64, float64, float64, float64)) *Maroto_GetPageMargins_Call {
	_c.Call.Return(run)
	return _c
}

// GetPageSize provides a mock function with given fields:
func (_m *Maroto) GetPageSize() (float64, float64) {
	ret := _m.Called()

	var r0 float64
	var r1 float64
	if rf, ok := ret.Get(0).(func() (float64, float64)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() float64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(float64)
	}

	return r0, r1
}

// Maroto_GetPageSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPageSize'
type Maroto_GetPageSize_Call struct {
	*mock.Call
}

// GetPageSize is a helper method to define mock.On call
func (_e *Maroto_Expecter) GetPageSize() *Maroto_GetPageSize_Call {
	return &Maroto_GetPageSize_Call{Call: _e.mock.On("GetPageSize")}
}

func (_c *Maroto_GetPageSize_Call) Run(run func()) *Maroto_GetPageSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Maroto_GetPageSize_Call) Return(width float64, height float64) *Maroto_GetPageSize_Call {
	_c.Call.Return(width, height)
	return _c
}

func (_c *Maroto_GetPageSize_Call) RunAndReturn(run func() (float64, float64)) *Maroto_GetPageSize_Call {
	_c.Call.Return(run)
	return _c
}

// Line provides a mock function with given fields: spaceHeight, prop
func (_m *Maroto) Line(spaceHeight float64, prop ...props.Line) {
	_va := make([]interface{}, len(prop))
	for _i := range prop {
		_va[_i] = prop[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, spaceHeight)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Maroto_Line_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Line'
type Maroto_Line_Call struct {
	*mock.Call
}

// Line is a helper method to define mock.On call
//   - spaceHeight float64
//   - prop ...props.Line
func (_e *Maroto_Expecter) Line(spaceHeight interface{}, prop ...interface{}) *Maroto_Line_Call {
	return &Maroto_Line_Call{Call: _e.mock.On("Line",
		append([]interface{}{spaceHeight}, prop...)...)}
}

func (_c *Maroto_Line_Call) Run(run func(spaceHeight float64, prop ...props.Line)) *Maroto_Line_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]props.Line, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(props.Line)
			}
		}
		run(args[0].(float64), variadicArgs...)
	})
	return _c
}

func (_c *Maroto_Line_Call) Return() *Maroto_Line_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_Line_Call) RunAndReturn(run func(float64, ...props.Line)) *Maroto_Line_Call {
	_c.Call.Return(run)
	return _c
}

// Output provides a mock function with given fields:
func (_m *Maroto) Output() (bytes.Buffer, error) {
	ret := _m.Called()

	var r0 bytes.Buffer
	var r1 error
	if rf, ok := ret.Get(0).(func() (bytes.Buffer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bytes.Buffer); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bytes.Buffer)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Maroto_Output_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Output'
type Maroto_Output_Call struct {
	*mock.Call
}

// Output is a helper method to define mock.On call
func (_e *Maroto_Expecter) Output() *Maroto_Output_Call {
	return &Maroto_Output_Call{Call: _e.mock.On("Output")}
}

func (_c *Maroto_Output_Call) Run(run func()) *Maroto_Output_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Maroto_Output_Call) Return(_a0 bytes.Buffer, _a1 error) *Maroto_Output_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Maroto_Output_Call) RunAndReturn(run func() (bytes.Buffer, error)) *Maroto_Output_Call {
	_c.Call.Return(run)
	return _c
}

// OutputFileAndClose provides a mock function with given fields: filePathName
func (_m *Maroto) OutputFileAndClose(filePathName string) error {
	ret := _m.Called(filePathName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filePathName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Maroto_OutputFileAndClose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OutputFileAndClose'
type Maroto_OutputFileAndClose_Call struct {
	*mock.Call
}

// OutputFileAndClose is a helper method to define mock.On call
//   - filePathName string
func (_e *Maroto_Expecter) OutputFileAndClose(filePathName interface{}) *Maroto_OutputFileAndClose_Call {
	return &Maroto_OutputFileAndClose_Call{Call: _e.mock.On("OutputFileAndClose", filePathName)}
}

func (_c *Maroto_OutputFileAndClose_Call) Run(run func(filePathName string)) *Maroto_OutputFileAndClose_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Maroto_OutputFileAndClose_Call) Return(_a0 error) *Maroto_OutputFileAndClose_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Maroto_OutputFileAndClose_Call) RunAndReturn(run func(string) error) *Maroto_OutputFileAndClose_Call {
	_c.Call.Return(run)
	return _c
}

// QrCode provides a mock function with given fields: code, prop
func (_m *Maroto) QrCode(code string, prop ...props.Rect) {
	_va := make([]interface{}, len(prop))
	for _i := range prop {
		_va[_i] = prop[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, code)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Maroto_QrCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QrCode'
type Maroto_QrCode_Call struct {
	*mock.Call
}

// QrCode is a helper method to define mock.On call
//   - code string
//   - prop ...props.Rect
func (_e *Maroto_Expecter) QrCode(code interface{}, prop ...interface{}) *Maroto_QrCode_Call {
	return &Maroto_QrCode_Call{Call: _e.mock.On("QrCode",
		append([]interface{}{code}, prop...)...)}
}

func (_c *Maroto_QrCode_Call) Run(run func(code string, prop ...props.Rect)) *Maroto_QrCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]props.Rect, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(props.Rect)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Maroto_QrCode_Call) Return() *Maroto_QrCode_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_QrCode_Call) RunAndReturn(run func(string, ...props.Rect)) *Maroto_QrCode_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterFooter provides a mock function with given fields: closure
func (_m *Maroto) RegisterFooter(closure func()) {
	_m.Called(closure)
}

// Maroto_RegisterFooter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterFooter'
type Maroto_RegisterFooter_Call struct {
	*mock.Call
}

// RegisterFooter is a helper method to define mock.On call
//   - closure func()
func (_e *Maroto_Expecter) RegisterFooter(closure interface{}) *Maroto_RegisterFooter_Call {
	return &Maroto_RegisterFooter_Call{Call: _e.mock.On("RegisterFooter", closure)}
}

func (_c *Maroto_RegisterFooter_Call) Run(run func(closure func())) *Maroto_RegisterFooter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *Maroto_RegisterFooter_Call) Return() *Maroto_RegisterFooter_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_RegisterFooter_Call) RunAndReturn(run func(func())) *Maroto_RegisterFooter_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterHeader provides a mock function with given fields: closure
func (_m *Maroto) RegisterHeader(closure func()) {
	_m.Called(closure)
}

// Maroto_RegisterHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterHeader'
type Maroto_RegisterHeader_Call struct {
	*mock.Call
}

// RegisterHeader is a helper method to define mock.On call
//   - closure func()
func (_e *Maroto_Expecter) RegisterHeader(closure interface{}) *Maroto_RegisterHeader_Call {
	return &Maroto_RegisterHeader_Call{Call: _e.mock.On("RegisterHeader", closure)}
}

func (_c *Maroto_RegisterHeader_Call) Run(run func(closure func())) *Maroto_RegisterHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *Maroto_RegisterHeader_Call) Return() *Maroto_RegisterHeader_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_RegisterHeader_Call) RunAndReturn(run func(func())) *Maroto_RegisterHeader_Call {
	_c.Call.Return(run)
	return _c
}

// Row provides a mock function with given fields: height, closure
func (_m *Maroto) Row(height float64, closure func()) {
	_m.Called(height, closure)
}

// Maroto_Row_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Row'
type Maroto_Row_Call struct {
	*mock.Call
}

// Row is a helper method to define mock.On call
//   - height float64
//   - closure func()
func (_e *Maroto_Expecter) Row(height interface{}, closure interface{}) *Maroto_Row_Call {
	return &Maroto_Row_Call{Call: _e.mock.On("Row", height, closure)}
}

func (_c *Maroto_Row_Call) Run(run func(height float64, closure func())) *Maroto_Row_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(func()))
	})
	return _c
}

func (_c *Maroto_Row_Call) Return() *Maroto_Row_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_Row_Call) RunAndReturn(run func(float64, func())) *Maroto_Row_Call {
	_c.Call.Return(run)
	return _c
}

// SetAliasNbPages provides a mock function with given fields: alias
func (_m *Maroto) SetAliasNbPages(alias string) {
	_m.Called(alias)
}

// Maroto_SetAliasNbPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAliasNbPages'
type Maroto_SetAliasNbPages_Call struct {
	*mock.Call
}

// SetAliasNbPages is a helper method to define mock.On call
//   - alias string
func (_e *Maroto_Expecter) SetAliasNbPages(alias interface{}) *Maroto_SetAliasNbPages_Call {
	return &Maroto_SetAliasNbPages_Call{Call: _e.mock.On("SetAliasNbPages", alias)}
}

func (_c *Maroto_SetAliasNbPages_Call) Run(run func(alias string)) *Maroto_SetAliasNbPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Maroto_SetAliasNbPages_Call) Return() *Maroto_SetAliasNbPages_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_SetAliasNbPages_Call) RunAndReturn(run func(string)) *Maroto_SetAliasNbPages_Call {
	_c.Call.Return(run)
	return _c
}

// SetAuthor provides a mock function with given fields: author, isUTF8
func (_m *Maroto) SetAuthor(author string, isUTF8 bool) {
	_m.Called(author, isUTF8)
}

// Maroto_SetAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAuthor'
type Maroto_SetAuthor_Call struct {
	*mock.Call
}

// SetAuthor is a helper method to define mock.On call
//   - author string
//   - isUTF8 bool
func (_e *Maroto_Expecter) SetAuthor(author interface{}, isUTF8 interface{}) *Maroto_SetAuthor_Call {
	return &Maroto_SetAuthor_Call{Call: _e.mock.On("SetAuthor", author, isUTF8)}
}

func (_c *Maroto_SetAuthor_Call) Run(run func(author string, isUTF8 bool)) *Maroto_SetAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *Maroto_SetAuthor_Call) Return() *Maroto_SetAuthor_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_SetAuthor_Call) RunAndReturn(run func(string, bool)) *Maroto_SetAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// SetBackgroundColor provides a mock function with given fields: _a0
func (_m *Maroto) SetBackgroundColor(_a0 color.Color) {
	_m.Called(_a0)
}

// Maroto_SetBackgroundColor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBackgroundColor'
type Maroto_SetBackgroundColor_Call struct {
	*mock.Call
}

// SetBackgroundColor is a helper method to define mock.On call
//   - _a0 color.Color
func (_e *Maroto_Expecter) SetBackgroundColor(_a0 interface{}) *Maroto_SetBackgroundColor_Call {
	return &Maroto_SetBackgroundColor_Call{Call: _e.mock.On("SetBackgroundColor", _a0)}
}

func (_c *Maroto_SetBackgroundColor_Call) Run(run func(_a0 color.Color)) *Maroto_SetBackgroundColor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(color.Color))
	})
	return _c
}

func (_c *Maroto_SetBackgroundColor_Call) Return() *Maroto_SetBackgroundColor_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_SetBackgroundColor_Call) RunAndReturn(run func(color.Color)) *Maroto_SetBackgroundColor_Call {
	_c.Call.Return(run)
	return _c
}

// SetBorder provides a mock function with given fields: on
func (_m *Maroto) SetBorder(on bool) {
	_m.Called(on)
}

// Maroto_SetBorder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBorder'
type Maroto_SetBorder_Call struct {
	*mock.Call
}

// SetBorder is a helper method to define mock.On call
//   - on bool
func (_e *Maroto_Expecter) SetBorder(on interface{}) *Maroto_SetBorder_Call {
	return &Maroto_SetBorder_Call{Call: _e.mock.On("SetBorder", on)}
}

func (_c *Maroto_SetBorder_Call) Run(run func(on bool)) *Maroto_SetBorder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *Maroto_SetBorder_Call) Return() *Maroto_SetBorder_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_SetBorder_Call) RunAndReturn(run func(bool)) *Maroto_SetBorder_Call {
	_c.Call.Return(run)
	return _c
}

// SetCompression provides a mock function with given fields: compress
func (_m *Maroto) SetCompression(compress bool) {
	_m.Called(compress)
}

// Maroto_SetCompression_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCompression'
type Maroto_SetCompression_Call struct {
	*mock.Call
}

// SetCompression is a helper method to define mock.On call
//   - compress bool
func (_e *Maroto_Expecter) SetCompression(compress interface{}) *Maroto_SetCompression_Call {
	return &Maroto_SetCompression_Call{Call: _e.mock.On("SetCompression", compress)}
}

func (_c *Maroto_SetCompression_Call) Run(run func(compress bool)) *Maroto_SetCompression_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *Maroto_SetCompression_Call) Return() *Maroto_SetCompression_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_SetCompression_Call) RunAndReturn(run func(bool)) *Maroto_SetCompression_Call {
	_c.Call.Return(run)
	return _c
}

// SetCreationDate provides a mock function with given fields: _a0
func (_m *Maroto) SetCreationDate(_a0 time.Time) {
	_m.Called(_a0)
}

// Maroto_SetCreationDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCreationDate'
type Maroto_SetCreationDate_Call struct {
	*mock.Call
}

// SetCreationDate is a helper method to define mock.On call
//   - _a0 time.Time
func (_e *Maroto_Expecter) SetCreationDate(_a0 interface{}) *Maroto_SetCreationDate_Call {
	return &Maroto_SetCreationDate_Call{Call: _e.mock.On("SetCreationDate", _a0)}
}

func (_c *Maroto_SetCreationDate_Call) Run(run func(_a0 time.Time)) *Maroto_SetCreationDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *Maroto_SetCreationDate_Call) Return() *Maroto_SetCreationDate_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_SetCreationDate_Call) RunAndReturn(run func(time.Time)) *Maroto_SetCreationDate_Call {
	_c.Call.Return(run)
	return _c
}

// SetCreator provides a mock function with given fields: creator, isUTF8
func (_m *Maroto) SetCreator(creator string, isUTF8 bool) {
	_m.Called(creator, isUTF8)
}

// Maroto_SetCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCreator'
type Maroto_SetCreator_Call struct {
	*mock.Call
}

// SetCreator is a helper method to define mock.On call
//   - creator string
//   - isUTF8 bool
func (_e *Maroto_Expecter) SetCreator(creator interface{}, isUTF8 interface{}) *Maroto_SetCreator_Call {
	return &Maroto_SetCreator_Call{Call: _e.mock.On("SetCreator", creator, isUTF8)}
}

func (_c *Maroto_SetCreator_Call) Run(run func(creator string, isUTF8 bool)) *Maroto_SetCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *Maroto_SetCreator_Call) Return() *Maroto_SetCreator_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_SetCreator_Call) RunAndReturn(run func(string, bool)) *Maroto_SetCreator_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultFontFamily provides a mock function with given fields: fontFamily
func (_m *Maroto) SetDefaultFontFamily(fontFamily string) {
	_m.Called(fontFamily)
}

// Maroto_SetDefaultFontFamily_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultFontFamily'
type Maroto_SetDefaultFontFamily_Call struct {
	*mock.Call
}

// SetDefaultFontFamily is a helper method to define mock.On call
//   - fontFamily string
func (_e *Maroto_Expecter) SetDefaultFontFamily(fontFamily interface{}) *Maroto_SetDefaultFontFamily_Call {
	return &Maroto_SetDefaultFontFamily_Call{Call: _e.mock.On("SetDefaultFontFamily", fontFamily)}
}

func (_c *Maroto_SetDefaultFontFamily_Call) Run(run func(fontFamily string)) *Maroto_SetDefaultFontFamily_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Maroto_SetDefaultFontFamily_Call) Return() *Maroto_SetDefaultFontFamily_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_SetDefaultFontFamily_Call) RunAndReturn(run func(string)) *Maroto_SetDefaultFontFamily_Call {
	_c.Call.Return(run)
	return _c
}

// SetFirstPageNb provides a mock function with given fields: number
func (_m *Maroto) SetFirstPageNb(number int) {
	_m.Called(number)
}

// Maroto_SetFirstPageNb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFirstPageNb'
type Maroto_SetFirstPageNb_Call struct {
	*mock.Call
}

// SetFirstPageNb is a helper method to define mock.On call
//   - number int
func (_e *Maroto_Expecter) SetFirstPageNb(number interface{}) *Maroto_SetFirstPageNb_Call {
	return &Maroto_SetFirstPageNb_Call{Call: _e.mock.On("SetFirstPageNb", number)}
}

func (_c *Maroto_SetFirstPageNb_Call) Run(run func(number int)) *Maroto_SetFirstPageNb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Maroto_SetFirstPageNb_Call) Return() *Maroto_SetFirstPageNb_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_SetFirstPageNb_Call) RunAndReturn(run func(int)) *Maroto_SetFirstPageNb_Call {
	_c.Call.Return(run)
	return _c
}

// SetFontLocation provides a mock function with given fields: fontDirStr
func (_m *Maroto) SetFontLocation(fontDirStr string) {
	_m.Called(fontDirStr)
}

// Maroto_SetFontLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFontLocation'
type Maroto_SetFontLocation_Call struct {
	*mock.Call
}

// SetFontLocation is a helper method to define mock.On call
//   - fontDirStr string
func (_e *Maroto_Expecter) SetFontLocation(fontDirStr interface{}) *Maroto_SetFontLocation_Call {
	return &Maroto_SetFontLocation_Call{Call: _e.mock.On("SetFontLocation", fontDirStr)}
}

func (_c *Maroto_SetFontLocation_Call) Run(run func(fontDirStr string)) *Maroto_SetFontLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Maroto_SetFontLocation_Call) Return() *Maroto_SetFontLocation_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_SetFontLocation_Call) RunAndReturn(run func(string)) *Maroto_SetFontLocation_Call {
	_c.Call.Return(run)
	return _c
}

// SetMaxGridSum provides a mock function with given fields: maxGridSum
func (_m *Maroto) SetMaxGridSum(maxGridSum float64) {
	_m.Called(maxGridSum)
}

// Maroto_SetMaxGridSum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMaxGridSum'
type Maroto_SetMaxGridSum_Call struct {
	*mock.Call
}

// SetMaxGridSum is a helper method to define mock.On call
//   - maxGridSum float64
func (_e *Maroto_Expecter) SetMaxGridSum(maxGridSum interface{}) *Maroto_SetMaxGridSum_Call {
	return &Maroto_SetMaxGridSum_Call{Call: _e.mock.On("SetMaxGridSum", maxGridSum)}
}

func (_c *Maroto_SetMaxGridSum_Call) Run(run func(maxGridSum float64)) *Maroto_SetMaxGridSum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *Maroto_SetMaxGridSum_Call) Return() *Maroto_SetMaxGridSum_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_SetMaxGridSum_Call) RunAndReturn(run func(float64)) *Maroto_SetMaxGridSum_Call {
	_c.Call.Return(run)
	return _c
}

// SetPageMargins provides a mock function with given fields: left, top, right
func (_m *Maroto) SetPageMargins(left float64, top float64, right float64) {
	_m.Called(left, top, right)
}

// Maroto_SetPageMargins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPageMargins'
type Maroto_SetPageMargins_Call struct {
	*mock.Call
}

// SetPageMargins is a helper method to define mock.On call
//   - left float64
//   - top float64
//   - right float64
func (_e *Maroto_Expecter) SetPageMargins(left interface{}, top interface{}, right interface{}) *Maroto_SetPageMargins_Call {
	return &Maroto_SetPageMargins_Call{Call: _e.mock.On("SetPageMargins", left, top, right)}
}

func (_c *Maroto_SetPageMargins_Call) Run(run func(left float64, top float64, right float64)) *Maroto_SetPageMargins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(float64), args[2].(float64))
	})
	return _c
}

func (_c *Maroto_SetPageMargins_Call) Return() *Maroto_SetPageMargins_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_SetPageMargins_Call) RunAndReturn(run func(float64, float64, float64)) *Maroto_SetPageMargins_Call {
	_c.Call.Return(run)
	return _c
}

// SetProtection provides a mock function with given fields: actionFlag, userPassStr, ownerPassStr
func (_m *Maroto) SetProtection(actionFlag byte, userPassStr string, ownerPassStr string) {
	_m.Called(actionFlag, userPassStr, ownerPassStr)
}

// Maroto_SetProtection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetProtection'
type Maroto_SetProtection_Call struct {
	*mock.Call
}

// SetProtection is a helper method to define mock.On call
//   - actionFlag byte
//   - userPassStr string
//   - ownerPassStr string
func (_e *Maroto_Expecter) SetProtection(actionFlag interface{}, userPassStr interface{}, ownerPassStr interface{}) *Maroto_SetProtection_Call {
	return &Maroto_SetProtection_Call{Call: _e.mock.On("SetProtection", actionFlag, userPassStr, ownerPassStr)}
}

func (_c *Maroto_SetProtection_Call) Run(run func(actionFlag byte, userPassStr string, ownerPassStr string)) *Maroto_SetProtection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(byte), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Maroto_SetProtection_Call) Return() *Maroto_SetProtection_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_SetProtection_Call) RunAndReturn(run func(byte, string, string)) *Maroto_SetProtection_Call {
	_c.Call.Return(run)
	return _c
}

// SetSubject provides a mock function with given fields: subject, isUTF8
func (_m *Maroto) SetSubject(subject string, isUTF8 bool) {
	_m.Called(subject, isUTF8)
}

// Maroto_SetSubject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSubject'
type Maroto_SetSubject_Call struct {
	*mock.Call
}

// SetSubject is a helper method to define mock.On call
//   - subject string
//   - isUTF8 bool
func (_e *Maroto_Expecter) SetSubject(subject interface{}, isUTF8 interface{}) *Maroto_SetSubject_Call {
	return &Maroto_SetSubject_Call{Call: _e.mock.On("SetSubject", subject, isUTF8)}
}

func (_c *Maroto_SetSubject_Call) Run(run func(subject string, isUTF8 bool)) *Maroto_SetSubject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *Maroto_SetSubject_Call) Return() *Maroto_SetSubject_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_SetSubject_Call) RunAndReturn(run func(string, bool)) *Maroto_SetSubject_Call {
	_c.Call.Return(run)
	return _c
}

// SetTitle provides a mock function with given fields: title, isUTF8
func (_m *Maroto) SetTitle(title string, isUTF8 bool) {
	_m.Called(title, isUTF8)
}

// Maroto_SetTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTitle'
type Maroto_SetTitle_Call struct {
	*mock.Call
}

// SetTitle is a helper method to define mock.On call
//   - title string
//   - isUTF8 bool
func (_e *Maroto_Expecter) SetTitle(title interface{}, isUTF8 interface{}) *Maroto_SetTitle_Call {
	return &Maroto_SetTitle_Call{Call: _e.mock.On("SetTitle", title, isUTF8)}
}

func (_c *Maroto_SetTitle_Call) Run(run func(title string, isUTF8 bool)) *Maroto_SetTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *Maroto_SetTitle_Call) Return() *Maroto_SetTitle_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_SetTitle_Call) RunAndReturn(run func(string, bool)) *Maroto_SetTitle_Call {
	_c.Call.Return(run)
	return _c
}

// Signature provides a mock function with given fields: label, prop
func (_m *Maroto) Signature(label string, prop ...props.Font) {
	_va := make([]interface{}, len(prop))
	for _i := range prop {
		_va[_i] = prop[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, label)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Maroto_Signature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signature'
type Maroto_Signature_Call struct {
	*mock.Call
}

// Signature is a helper method to define mock.On call
//   - label string
//   - prop ...props.Font
func (_e *Maroto_Expecter) Signature(label interface{}, prop ...interface{}) *Maroto_Signature_Call {
	return &Maroto_Signature_Call{Call: _e.mock.On("Signature",
		append([]interface{}{label}, prop...)...)}
}

func (_c *Maroto_Signature_Call) Run(run func(label string, prop ...props.Font)) *Maroto_Signature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]props.Font, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(props.Font)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Maroto_Signature_Call) Return() *Maroto_Signature_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_Signature_Call) RunAndReturn(run func(string, ...props.Font)) *Maroto_Signature_Call {
	_c.Call.Return(run)
	return _c
}

// TableList provides a mock function with given fields: header, contents, prop
func (_m *Maroto) TableList(header []string, contents [][]string, prop ...props.TableList) {
	_va := make([]interface{}, len(prop))
	for _i := range prop {
		_va[_i] = prop[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, header, contents)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Maroto_TableList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TableList'
type Maroto_TableList_Call struct {
	*mock.Call
}

// TableList is a helper method to define mock.On call
//   - header []string
//   - contents [][]string
//   - prop ...props.TableList
func (_e *Maroto_Expecter) TableList(header interface{}, contents interface{}, prop ...interface{}) *Maroto_TableList_Call {
	return &Maroto_TableList_Call{Call: _e.mock.On("TableList",
		append([]interface{}{header, contents}, prop...)...)}
}

func (_c *Maroto_TableList_Call) Run(run func(header []string, contents [][]string, prop ...props.TableList)) *Maroto_TableList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]props.TableList, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(props.TableList)
			}
		}
		run(args[0].([]string), args[1].([][]string), variadicArgs...)
	})
	return _c
}

func (_c *Maroto_TableList_Call) Return() *Maroto_TableList_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_TableList_Call) RunAndReturn(run func([]string, [][]string, ...props.TableList)) *Maroto_TableList_Call {
	_c.Call.Return(run)
	return _c
}

// Text provides a mock function with given fields: text, prop
func (_m *Maroto) Text(text string, prop ...props.Text) {
	_va := make([]interface{}, len(prop))
	for _i := range prop {
		_va[_i] = prop[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, text)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Maroto_Text_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Text'
type Maroto_Text_Call struct {
	*mock.Call
}

// Text is a helper method to define mock.On call
//   - text string
//   - prop ...props.Text
func (_e *Maroto_Expecter) Text(text interface{}, prop ...interface{}) *Maroto_Text_Call {
	return &Maroto_Text_Call{Call: _e.mock.On("Text",
		append([]interface{}{text}, prop...)...)}
}

func (_c *Maroto_Text_Call) Run(run func(text string, prop ...props.Text)) *Maroto_Text_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]props.Text, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(props.Text)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Maroto_Text_Call) Return() *Maroto_Text_Call {
	_c.Call.Return()
	return _c
}

func (_c *Maroto_Text_Call) RunAndReturn(run func(string, ...props.Text)) *Maroto_Text_Call {
	_c.Call.Return(run)
	return _c
}

// NewMaroto creates a new instance of Maroto. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMaroto(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Maroto {
	mock := &Maroto{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
