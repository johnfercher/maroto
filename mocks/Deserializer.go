// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Deserializer is an autogenerated mock type for the Deserializer type
type Deserializer struct {
	mock.Mock
}

type Deserializer_Expecter struct {
	mock *mock.Mock
}

func (_m *Deserializer) EXPECT() *Deserializer_Expecter {
	return &Deserializer_Expecter{mock: &_m.Mock}
}

// Deserialize provides a mock function with given fields: document
func (_m *Deserializer) Deserialize(document string) (map[string]interface{}, error) {
	ret := _m.Called(document)

	if len(ret) == 0 {
		panic("no return value specified for Deserialize")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return rf(document)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(document)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(document)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Deserializer_Deserialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deserialize'
type Deserializer_Deserialize_Call struct {
	*mock.Call
}

// Deserialize is a helper method to define mock.On call
//   - document string
func (_e *Deserializer_Expecter) Deserialize(document interface{}) *Deserializer_Deserialize_Call {
	return &Deserializer_Deserialize_Call{Call: _e.mock.On("Deserialize", document)}
}

func (_c *Deserializer_Deserialize_Call) Run(run func(document string)) *Deserializer_Deserialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Deserializer_Deserialize_Call) Return(_a0 map[string]interface{}, _a1 error) *Deserializer_Deserialize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Deserializer_Deserialize_Call) RunAndReturn(run func(string) (map[string]interface{}, error)) *Deserializer_Deserialize_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeserializer creates a new instance of Deserializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeserializer(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Deserializer {
	mock := &Deserializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
