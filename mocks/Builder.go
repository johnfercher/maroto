// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	cache "github.com/johnfercher/maroto/v2/internal/cache"
	entity "github.com/johnfercher/maroto/v2/pkg/core/entity"

	gofpdf "github.com/johnfercher/maroto/v2/internal/providers/gofpdf"

	mock "github.com/stretchr/testify/mock"
)

// Builder is an autogenerated mock type for the Builder type
type Builder struct {
	mock.Mock
}

type Builder_Expecter struct {
	mock *mock.Mock
}

func (_m *Builder) EXPECT() *Builder_Expecter {
	return &Builder_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields: cfg, _a1
func (_m *Builder) Build(cfg *entity.Config, _a1 cache.Cache) *gofpdf.Dependencies {
	ret := _m.Called(cfg, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 *gofpdf.Dependencies
	if rf, ok := ret.Get(0).(func(*entity.Config, cache.Cache) *gofpdf.Dependencies); ok {
		r0 = rf(cfg, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gofpdf.Dependencies)
		}
	}

	return r0
}

// Builder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type Builder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
//   - cfg *entity.Config
//   - _a1 cache.Cache
func (_e *Builder_Expecter) Build(cfg interface{}, _a1 interface{}) *Builder_Build_Call {
	return &Builder_Build_Call{Call: _e.mock.On("Build", cfg, _a1)}
}

func (_c *Builder_Build_Call) Run(run func(cfg *entity.Config, _a1 cache.Cache)) *Builder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Config), args[1].(cache.Cache))
	})
	return _c
}

func (_c *Builder_Build_Call) Return(_a0 *gofpdf.Dependencies) *Builder_Build_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Builder_Build_Call) RunAndReturn(run func(*entity.Config, cache.Cache) *gofpdf.Dependencies) *Builder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// NewBuilder creates a new instance of Builder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBuilder(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Builder {
	mock := &Builder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
