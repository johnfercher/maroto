// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	color "github.com/johnfercher/maroto/pkg/color"

	mock "github.com/stretchr/testify/mock"

	props "github.com/johnfercher/maroto/pkg/props"
)

// MarotoGridPart is an autogenerated mock type for the MarotoGridPart type
type MarotoGridPart struct {
	mock.Mock
}

type MarotoGridPart_Expecter struct {
	mock *mock.Mock
}

func (_m *MarotoGridPart) EXPECT() *MarotoGridPart_Expecter {
	return &MarotoGridPart_Expecter{mock: &_m.Mock}
}

// Col provides a mock function with given fields: width, closure
func (_m *MarotoGridPart) Col(width uint, closure func()) {
	_m.Called(width, closure)
}

// MarotoGridPart_Col_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Col'
type MarotoGridPart_Col_Call struct {
	*mock.Call
}

// Col is a helper method to define mock.On call
//   - width uint
//   - closure func()
func (_e *MarotoGridPart_Expecter) Col(width interface{}, closure interface{}) *MarotoGridPart_Col_Call {
	return &MarotoGridPart_Col_Call{Call: _e.mock.On("Col", width, closure)}
}

func (_c *MarotoGridPart_Col_Call) Run(run func(width uint, closure func())) *MarotoGridPart_Col_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(func()))
	})
	return _c
}

func (_c *MarotoGridPart_Col_Call) Return() *MarotoGridPart_Col_Call {
	_c.Call.Return()
	return _c
}

func (_c *MarotoGridPart_Col_Call) RunAndReturn(run func(uint, func())) *MarotoGridPart_Col_Call {
	_c.Call.Return(run)
	return _c
}

// ColSpace provides a mock function with given fields: width
func (_m *MarotoGridPart) ColSpace(width uint) {
	_m.Called(width)
}

// MarotoGridPart_ColSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ColSpace'
type MarotoGridPart_ColSpace_Call struct {
	*mock.Call
}

// ColSpace is a helper method to define mock.On call
//   - width uint
func (_e *MarotoGridPart_Expecter) ColSpace(width interface{}) *MarotoGridPart_ColSpace_Call {
	return &MarotoGridPart_ColSpace_Call{Call: _e.mock.On("ColSpace", width)}
}

func (_c *MarotoGridPart_ColSpace_Call) Run(run func(width uint)) *MarotoGridPart_ColSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MarotoGridPart_ColSpace_Call) Return() *MarotoGridPart_ColSpace_Call {
	_c.Call.Return()
	return _c
}

func (_c *MarotoGridPart_ColSpace_Call) RunAndReturn(run func(uint)) *MarotoGridPart_ColSpace_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentOffset provides a mock function with given fields:
func (_m *MarotoGridPart) GetCurrentOffset() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MarotoGridPart_GetCurrentOffset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentOffset'
type MarotoGridPart_GetCurrentOffset_Call struct {
	*mock.Call
}

// GetCurrentOffset is a helper method to define mock.On call
func (_e *MarotoGridPart_Expecter) GetCurrentOffset() *MarotoGridPart_GetCurrentOffset_Call {
	return &MarotoGridPart_GetCurrentOffset_Call{Call: _e.mock.On("GetCurrentOffset")}
}

func (_c *MarotoGridPart_GetCurrentOffset_Call) Run(run func()) *MarotoGridPart_GetCurrentOffset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MarotoGridPart_GetCurrentOffset_Call) Return(_a0 float64) *MarotoGridPart_GetCurrentOffset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MarotoGridPart_GetCurrentOffset_Call) RunAndReturn(run func() float64) *MarotoGridPart_GetCurrentOffset_Call {
	_c.Call.Return(run)
	return _c
}

// GetPageMargins provides a mock function with given fields:
func (_m *MarotoGridPart) GetPageMargins() (float64, float64, float64, float64) {
	ret := _m.Called()

	var r0 float64
	var r1 float64
	var r2 float64
	var r3 float64
	if rf, ok := ret.Get(0).(func() (float64, float64, float64, float64)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() float64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func() float64); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(float64)
	}

	if rf, ok := ret.Get(3).(func() float64); ok {
		r3 = rf()
	} else {
		r3 = ret.Get(3).(float64)
	}

	return r0, r1, r2, r3
}

// MarotoGridPart_GetPageMargins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPageMargins'
type MarotoGridPart_GetPageMargins_Call struct {
	*mock.Call
}

// GetPageMargins is a helper method to define mock.On call
func (_e *MarotoGridPart_Expecter) GetPageMargins() *MarotoGridPart_GetPageMargins_Call {
	return &MarotoGridPart_GetPageMargins_Call{Call: _e.mock.On("GetPageMargins")}
}

func (_c *MarotoGridPart_GetPageMargins_Call) Run(run func()) *MarotoGridPart_GetPageMargins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MarotoGridPart_GetPageMargins_Call) Return(left float64, top float64, right float64, bottom float64) *MarotoGridPart_GetPageMargins_Call {
	_c.Call.Return(left, top, right, bottom)
	return _c
}

func (_c *MarotoGridPart_GetPageMargins_Call) RunAndReturn(run func() (float64, float64, float64, float64)) *MarotoGridPart_GetPageMargins_Call {
	_c.Call.Return(run)
	return _c
}

// GetPageSize provides a mock function with given fields:
func (_m *MarotoGridPart) GetPageSize() (float64, float64) {
	ret := _m.Called()

	var r0 float64
	var r1 float64
	if rf, ok := ret.Get(0).(func() (float64, float64)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() float64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(float64)
	}

	return r0, r1
}

// MarotoGridPart_GetPageSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPageSize'
type MarotoGridPart_GetPageSize_Call struct {
	*mock.Call
}

// GetPageSize is a helper method to define mock.On call
func (_e *MarotoGridPart_Expecter) GetPageSize() *MarotoGridPart_GetPageSize_Call {
	return &MarotoGridPart_GetPageSize_Call{Call: _e.mock.On("GetPageSize")}
}

func (_c *MarotoGridPart_GetPageSize_Call) Run(run func()) *MarotoGridPart_GetPageSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MarotoGridPart_GetPageSize_Call) Return(width float64, height float64) *MarotoGridPart_GetPageSize_Call {
	_c.Call.Return(width, height)
	return _c
}

func (_c *MarotoGridPart_GetPageSize_Call) RunAndReturn(run func() (float64, float64)) *MarotoGridPart_GetPageSize_Call {
	_c.Call.Return(run)
	return _c
}

// Line provides a mock function with given fields: spaceHeight, line
func (_m *MarotoGridPart) Line(spaceHeight float64, line ...props.Line) {
	_va := make([]interface{}, len(line))
	for _i := range line {
		_va[_i] = line[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, spaceHeight)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MarotoGridPart_Line_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Line'
type MarotoGridPart_Line_Call struct {
	*mock.Call
}

// Line is a helper method to define mock.On call
//   - spaceHeight float64
//   - line ...props.Line
func (_e *MarotoGridPart_Expecter) Line(spaceHeight interface{}, line ...interface{}) *MarotoGridPart_Line_Call {
	return &MarotoGridPart_Line_Call{Call: _e.mock.On("Line",
		append([]interface{}{spaceHeight}, line...)...)}
}

func (_c *MarotoGridPart_Line_Call) Run(run func(spaceHeight float64, line ...props.Line)) *MarotoGridPart_Line_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]props.Line, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(props.Line)
			}
		}
		run(args[0].(float64), variadicArgs...)
	})
	return _c
}

func (_c *MarotoGridPart_Line_Call) Return() *MarotoGridPart_Line_Call {
	_c.Call.Return()
	return _c
}

func (_c *MarotoGridPart_Line_Call) RunAndReturn(run func(float64, ...props.Line)) *MarotoGridPart_Line_Call {
	_c.Call.Return(run)
	return _c
}

// Row provides a mock function with given fields: height, closure
func (_m *MarotoGridPart) Row(height float64, closure func()) {
	_m.Called(height, closure)
}

// MarotoGridPart_Row_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Row'
type MarotoGridPart_Row_Call struct {
	*mock.Call
}

// Row is a helper method to define mock.On call
//   - height float64
//   - closure func()
func (_e *MarotoGridPart_Expecter) Row(height interface{}, closure interface{}) *MarotoGridPart_Row_Call {
	return &MarotoGridPart_Row_Call{Call: _e.mock.On("Row", height, closure)}
}

func (_c *MarotoGridPart_Row_Call) Run(run func(height float64, closure func())) *MarotoGridPart_Row_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(func()))
	})
	return _c
}

func (_c *MarotoGridPart_Row_Call) Return() *MarotoGridPart_Row_Call {
	_c.Call.Return()
	return _c
}

func (_c *MarotoGridPart_Row_Call) RunAndReturn(run func(float64, func())) *MarotoGridPart_Row_Call {
	_c.Call.Return(run)
	return _c
}

// SetBackgroundColor provides a mock function with given fields: _a0
func (_m *MarotoGridPart) SetBackgroundColor(_a0 color.Color) {
	_m.Called(_a0)
}

// MarotoGridPart_SetBackgroundColor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBackgroundColor'
type MarotoGridPart_SetBackgroundColor_Call struct {
	*mock.Call
}

// SetBackgroundColor is a helper method to define mock.On call
//   - _a0 color.Color
func (_e *MarotoGridPart_Expecter) SetBackgroundColor(_a0 interface{}) *MarotoGridPart_SetBackgroundColor_Call {
	return &MarotoGridPart_SetBackgroundColor_Call{Call: _e.mock.On("SetBackgroundColor", _a0)}
}

func (_c *MarotoGridPart_SetBackgroundColor_Call) Run(run func(_a0 color.Color)) *MarotoGridPart_SetBackgroundColor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(color.Color))
	})
	return _c
}

func (_c *MarotoGridPart_SetBackgroundColor_Call) Return() *MarotoGridPart_SetBackgroundColor_Call {
	_c.Call.Return()
	return _c
}

func (_c *MarotoGridPart_SetBackgroundColor_Call) RunAndReturn(run func(color.Color)) *MarotoGridPart_SetBackgroundColor_Call {
	_c.Call.Return(run)
	return _c
}

// Text provides a mock function with given fields: text, prop
func (_m *MarotoGridPart) Text(text string, prop ...props.Text) {
	_va := make([]interface{}, len(prop))
	for _i := range prop {
		_va[_i] = prop[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, text)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MarotoGridPart_Text_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Text'
type MarotoGridPart_Text_Call struct {
	*mock.Call
}

// Text is a helper method to define mock.On call
//   - text string
//   - prop ...props.Text
func (_e *MarotoGridPart_Expecter) Text(text interface{}, prop ...interface{}) *MarotoGridPart_Text_Call {
	return &MarotoGridPart_Text_Call{Call: _e.mock.On("Text",
		append([]interface{}{text}, prop...)...)}
}

func (_c *MarotoGridPart_Text_Call) Run(run func(text string, prop ...props.Text)) *MarotoGridPart_Text_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]props.Text, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(props.Text)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MarotoGridPart_Text_Call) Return() *MarotoGridPart_Text_Call {
	_c.Call.Return()
	return _c
}

func (_c *MarotoGridPart_Text_Call) RunAndReturn(run func(string, ...props.Text)) *MarotoGridPart_Text_Call {
	_c.Call.Return(run)
	return _c
}

// NewMarotoGridPart creates a new instance of MarotoGridPart. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMarotoGridPart(t interface {
	mock.TestingT
	Cleanup(func())
}) *MarotoGridPart {
	mock := &MarotoGridPart{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
