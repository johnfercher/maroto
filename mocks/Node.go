// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	config "github.com/johnfercher/maroto/pkg/v2/config"
	domain "github.com/johnfercher/maroto/pkg/v2/domain"

	mock "github.com/stretchr/testify/mock"

	tree "github.com/johnfercher/go-tree/tree"
)

// Node is an autogenerated mock type for the Node type
type Node struct {
	mock.Mock
}

type Node_Expecter struct {
	mock *mock.Mock
}

func (_m *Node) EXPECT() *Node_Expecter {
	return &Node_Expecter{mock: &_m.Mock}
}

// GetStructure provides a mock function with given fields:
func (_m *Node) GetStructure() *tree.Node[domain.Structure] {
	ret := _m.Called()

	var r0 *tree.Node[domain.Structure]
	if rf, ok := ret.Get(0).(func() *tree.Node[domain.Structure]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tree.Node[domain.Structure])
		}
	}

	return r0
}

// Node_GetStructure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStructure'
type Node_GetStructure_Call struct {
	*mock.Call
}

// GetStructure is a helper method to define mock.On call
func (_e *Node_Expecter) GetStructure() *Node_GetStructure_Call {
	return &Node_GetStructure_Call{Call: _e.mock.On("GetStructure")}
}

func (_c *Node_GetStructure_Call) Run(run func()) *Node_GetStructure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_GetStructure_Call) Return(_a0 *tree.Node[domain.Structure]) *Node_GetStructure_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_GetStructure_Call) RunAndReturn(run func() *tree.Node[domain.Structure]) *Node_GetStructure_Call {
	_c.Call.Return(run)
	return _c
}

// SetConfig provides a mock function with given fields: _a0
func (_m *Node) SetConfig(_a0 *config.Maroto) {
	_m.Called(_a0)
}

// Node_SetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConfig'
type Node_SetConfig_Call struct {
	*mock.Call
}

// SetConfig is a helper method to define mock.On call
//   - _a0 *config.Maroto
func (_e *Node_Expecter) SetConfig(_a0 interface{}) *Node_SetConfig_Call {
	return &Node_SetConfig_Call{Call: _e.mock.On("SetConfig", _a0)}
}

func (_c *Node_SetConfig_Call) Run(run func(_a0 *config.Maroto)) *Node_SetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.Maroto))
	})
	return _c
}

func (_c *Node_SetConfig_Call) Return() *Node_SetConfig_Call {
	_c.Call.Return()
	return _c
}

func (_c *Node_SetConfig_Call) RunAndReturn(run func(*config.Maroto)) *Node_SetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewNode creates a new instance of Node. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNode(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Node {
	mock := &Node{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
